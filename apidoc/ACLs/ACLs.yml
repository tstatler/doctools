name: ACLs
summary: Access Control Lists (ACLs)
description: |
    The ACL object implements access control lists for ACS objects. An access
    control list controls read and write access to any ACS objects it's attached
    to. For ACS, read and write permission are defined as follows:
    
      * **Read permission** includes the ability to show, query and search ACS objects.
      * **Write permission** includes the ability to update and delete ACS objects.
    
    An ACL object includes four attributes:

    * `public_read` &mdash; Boolean; if `true`, all users have read access. Default is `false`.
    * `public_write` &mdash; Boolean; if `true`, all users have write access. Default is `false`.
    * `reader_ids` &mdash; Comma-separated list of users with read access.
    * `writer_ids` &mdash; Comma-separated list of users with write access.
    
    The object's owner always has read and write permission. 

    You assign an ACL to an object via the object's `acl_id` or `acl_name` properties. Currently, ACLs 
    can be assigned to the following types of ACS objects: {@link Checkins}, {@link CustomObjects}, 
    {@link Events}, {@link Files}, {@link Photos}, {@link PhotoCollections}, {@link Places}, {@link Posts},
    {@link Reviews} and {@link Statuses}. 
  
    ### ACL usage scenarios
        
    #### Public read and write ####

    In the following example User1 creates an ACL object named "photo_access" that allows both public reading and writing.
    It then creates a new {@link Photos Photo} object and assigns to it the "photo_access" ACL so 
    that anyone can can update, delete, show, or query the photo.

        // Logged in as User1:
        Cloud.ACLs.create({
            name: 'photo_access',
            public_read: true,
            public_write: true
        }, function (e) {});      

        // Then create Photo that uses the "photo_access" ACL:
        Cloud.Photos.create({
            photo: Titanium.Filesystem.getFile('photo.jpg'),
            acl_name: 'photo_access'
        }, function (e) { });          


    #### Restrict read access to specific users

    In the following example (continued), User1 updates the "photo_access" ACL object to limit 
    read access to only User2 and User3 of this ACL object. Subsequently, only the application administrator, 
    the ACL object owner (User1), User2 and User3 can read (show, search, or query) the Photo object;
    write permissions have not changed.
    
        // Logged in as User1:
        Cloud.ACLs.update({
            name: 'photo_access',
            public_read: false,
            reader_ids: [user2, user3]
        }, function (e) {});      
    
    #### Restrict write access to specific users

    In the following example (continued), User1 updates the "photo_access" ACL object to limit 
    write access to only User2 and User3. After this update, the application administrator, 
    the ACL object owner (User1), User2 and User3 can write (update/delete) the Photo object.

        // Logged in as User1:
        Cloud.ACLs.update({
            name: 'photo_access',
            public_write: false,
            writer_ids: [user2, user3]
        }, function (e) {}); 

fields:
  - name: name 
    description: Name of the ACL object.
    type: String

  - name: id 
    description: ID of the ACL object, automatically generated by ACS.
    type: String

  - name: readers
    description: |
        List of IDs identifying users who can read objects controlled by this ACL.
    type: Array<String>

  - name: writers
    description: |
        List of IDs identifying users who can update objects controlled by this ACL.
    type: Array<String>

  - name: public_read
    description: |
        Determines whether objects controlled by this ACS are publicly readable. 

        Default is false.
    type: Boolean

  - name: public_write
    description: |
        Determines whether objects controlled by this ACS are publicly writable. 

        Default is false.
    type: Boolean

  - name: user
    description: Owner of the ACL.
    type: Users

  - name: created_at
    description: ACL creation date.
    type: Date

  - name: updated_at
    description: ACL update date.
    type: Date

  - name: pretty_json
    description: | 
        Determines if the JSON response is formatted for readability (`true`), or displayed on a
        single line (`false`). Default is `false`.

    type: Boolean
