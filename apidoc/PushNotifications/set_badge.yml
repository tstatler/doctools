name: PushNotifications
methods:
  - name: set_badge
    summary: set_badge
    description: |
        Sets the value of the internally stored value of the badge.

        This method only updates the internally stored value of the badge.  To update the badge value
        on the iOS icon or Android notification center, send a push notification with the `badge` field defined.
    url: push_notification/set_badge.json
    http-method: PUT

    parameters: 

      - name: device_token
        description: | 
            Device token. Required if you are not an application admin.
        type: String

      - name: badge_number
        description: |
            Number to set as the badge on the application's icon.
            Specify postive and negative values with the `+` and `-`
            symbols to increment or decrement the current badge number, respectively.
        type: String

      - name: pretty_json
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean    
      
    examples:
      - platform: titanium
        example: |
            Requires Titanium SDK 3.2.1 and later.

                Cloud.PushNotifications.setBadge({
                    device_token: device_token.value,
                    badge_number: badge_number.value
                }, function (e) {
                    if (e.success) {
                        Ti.API.info('Badge Set!');
                    }
                    else {
                        Ti.API.error(e);
                    }
                });

      - platform: rest
        example: |
            Example cURL request:
            
                $ curl -b cookies.txt -c cookies.txt -X PUT -F "badge_number=12" "https://api.cloud.appcelerator.com/v1/push_notification/set_badge.json?key=<API_KEY>&pretty_json=true"

            Example JSON response:
            
                {
                  "meta": {
                    "status": "ok",
                    "code": 200,
                    "method_name": "setBadge"
                  }
                }
                
      - platform: ios
        example: |
            Example iOS APS SDK call:

                // Create dictionary of parameters to be passed with the request
                NSDictionary *data = @{
                    @"device_token": deviceToken,
                    @"badge_number": @5
                };

                [APSPushNotifications setBadge:data withBlock:^(APSResponse *e) {
                      if (e.success) {
                          [[[UIAlertView alloc] initWithTitle:@"Great" message:@"Success!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                      } else {
                          [[[UIAlertView alloc] initWithTitle:@"Error" message:e.errorMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                      }
                }];

      - platform: ios-acssdk
        example: |
            Example iOS call:
            
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:@"12" forKey:@"badge_number"]; 
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"PUT" baseUrl:@"push_notification/set_badge.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	// successfully call
                }

      - platform: android
        example: |
            Example Android call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("badge_number", 12);

                try {
                    APSPushNotifications.setBadge(data, new APSResponseHandler() {
 
                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                Log.i("APSPushNotifications", "Badge Set!");
                            } else {
                                Log.e("APSPushNotifications", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSPushNotifications", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                      Log.e("APSPushNotifications", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("badge_number", 12);
                CCResponse response = sdk.sendRequest("push_notification/set_badge.json", CCRequestMethod.PUT, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "setBadge".equals(meta.getMethod())) {
                }

