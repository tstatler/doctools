name: PushNotifications
methods:
  - name: subscribe_token
    summmary: subscribe_token
    description: |
        Subscribes a mobile device to a push notifications channel.

        Developers can create different channels for different types of push notifications, such as
        a friend request, chat, etc.
    url: push_notification/subscribe_token.json
    http-method: POST
    login-required: false

    parameters:

      - name: device_token
        description: |
            Android or iOS device token.

            For Android GCM, the length is dynamic and is less than 4096 characters.

            For Android MQTT, the length is fixed and 23 characters.

            For iOS, the length is 64 characters.
        type: String
        required: true

      - name: channel
        description: |
            Name of the channel.

            The name of the push channel cannot start with a hash symbol ('#').
        type: String
        required: true

      - name: type
        description: |
            Selects the push type.

            Set to `android` for Android devices using either Google Cloud Messaging
            or the MQTT protocol, or `ios` for iOS devices using Apple Push Notification Service.

            Using `gcm` to specify Google Cloud Messaging still works.
        type: String

      - name: pretty_print
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean                    

    examples:

    examples:
      - platform: titanium
        example: |

            This example subscribes to a push notification channel and checks the response.
            Requires Titanium SDK 3.1.2 and later.

                Cloud.PushNotifications.subscribeToken({
                    device_token: DEVICE_TOKEN,
                    channel: 'friend_request',
                    type: 'ios'
                }, function (e) {
                    if (e.success) {
                        alert('Success');
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                curl -i -X POST -F "type=ios" -F "device_token=<token>" -F "channel="friend_request" "http://api.cloud.appcelerator.com/v1/push_notification/subscribe_token.json?key=<app key>"

            Example JSON response:

                {
                  "meta": {
                    "status": "ok",
                    "code": 200,
                    "method_name": "SubscribeNotificationByToken"
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:@"friend_request" forKey:@"channel"];
                [paramDict setObject:@"f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358db" forKey:@"device_token"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"push_notification/subscribe_token.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	// successfully subscribed
                }

      - platform: android
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("type", "android");
                data.put("channel", "friend_request");
                data.put("device_token", "4e7a297ccc173bec93a2b81");
                CCResponse response =
                      sdk.sendRequest("push_notification/subscribe_token.json", CCRequestMethod.POST, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "SubscribeNotificationByToken".equals(meta.getMethod())) {
                  ...
                }

