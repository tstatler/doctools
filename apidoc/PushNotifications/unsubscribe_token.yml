name: PushNotifications
methods:
  - name: unsubscribe_token
    summary: unsubscribe_token
    description: |
        Unsubscribes the specified device from a push notification channel.
        If `channel` is not defined, unsubscribes the device from all channels.
    url: push_notification/unsubscribe_token.json
    http-method: DELETE
    login-required: false

    parameters:

      - name: channel
        description: Name of the push notification channel.
        type: String

      - name: device_token
        description: Android or iOS device token.
        type: String
        required: true

    examples:

      - platform: titanium
        example: |
            This example unsubscribes from a push notification channel and checks the response.
            Requires Titanium SDK 3.1.2 and later.

                Cloud.PushNotifications.unsubscribeToken({
                    channel: 'friend_request',
                    device_token: myPushDeviceToken
                }, function (e) {
                    if (e.success) {
                        alert('Success');
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                curl -X DELETE -F "channel=<channel>" -F "device_token=<token>" "https://api.cloud.appcelerator.com/v1/push_notification/unsubsribe_token.json?key=<key>"

            Example JSON response:

                {
                  "meta": {
                    "status": "ok",
                    "code": 200,
                    "method_name": "UnsubscribeNotificationByToken"
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:@"friend_request" forKey:@"channel"];
                [paramDict setObject:@"f7702d77b34ed94869f664e7a297ccc173bec93a2b815css6asd28461a0358db" forKey:@"device_token"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"DELETE" baseUrl:@"push_notification/unsubscribe.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	// successfully unsubscribed
                }

      - platform: android
        example: |
            Example Android call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("channel", "friend_request");
                data.put("device_token", "4e7a297ccc173bec93a2b81");

                try {
                    APSPushNotifications.unsubscribeToken(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {

                            if (e.getSuccess()) {
                                Log.i("APSPushNotifications", "Unsubscribed!");
                            } else {
                                Log.e("APSPushNotifications", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSPushNotifications", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSPushNotifications", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("channel", "friend_request");
                data.put("device_token", "4e7a297ccc173bec93a2b81");
                CCResponse response =
                    sdk.sendRequest("push_notification/subscribe_token.json", CCRequestMethod.DELETE, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "UnsubscribeNotificationByToken".equals(meta.getMethod())) {
                  ...
                }

