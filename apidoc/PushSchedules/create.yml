name: PushSchedules
methods:
  - name: create
    summary: create
    description: |
        Creates a scheduled push notification.  At minimum, you must specify the `start_time`,
        and `payload` parameters. A push schedule can optionally define a location query so that
        only devices in the specified geographic region will receive the push notification.

        This feature is only available for Enterprise users, and the current user must be an application admin.
    url: push_schedule/create.json
    http-method: POST
    login-required: true
    admin-required: true

    parameters: 

      - name: schedule
        description: |
            Push notification to schedule.

              * *start_time* (Date): Datetime to start the push notifications in ISO 8601 format (**required**).
              * *name* (String): Arbitray name to give to the scheduled push notification.
              * *push_notification* (Hash): Push notification to send (**required**).
              
                  * *channel* (String): Name of the channel to send the push notification to.
                    The name of the push channel cannot start with a hash symbol ('#').
                  * *payload* (Hash): Payload to send to the device. Same format as {@link PushNotifications#notify} (**required**).
                  * *to_ids* (Array<String>/String): Array or comma-separated list of IDs to send push notifications to.
                  * *options* (Hash): Dictionary to specify additional options:
                      * *expire_after_seconds* (Number): Expiration time in seconds of when to stop
                        sending the push notification based on the start date. For example, if the push
                        notification is scheduled to be sent in a week and the expiration time is for a
                        day.  The push expires in eight days and will not be sent if the user's device
                        has been off before the send day and after the end of the expiration period.
         
              * *recurrence* (Hash): Schedules the recurrence of the push notification.

                   * *interval* (String): Set to either `daily`, `weeky` or `monthly`.
                   * *end_time* (Date): Datetime to end the push notifications in ISO 8601 format.
                     Must occur after *start_time*.
    
        type: Hash
        required: true

      - name: where
        description: |
            A JSON-encoded object that defines a location query used to select the devices
            that will receive the scheduled notification. Up to 1000 users can be returned by the query. To specify a location query, set the `loc` field to a
            [MongoDB Geospatial Query](http://docs.mongodb.org/manual/reference/operator/query-geospatial/).
            The following query searches for all users within 2 km of Oakland, CA, USA:

                where={
                  "loc": {
                    "$nearSphere" : { 
                      "$geometry" : { 
                        "type" : "Point" , 
                        "coordinates" : [-122.2708,37.8044] } , 
                        "$maxDistance" : 2000 
                      }
                    }
                  }

            For details about using the `where` parameter, see the [Search and Query guide](#!/guide/search_query).
        type: Hash

      - name: pretty_print
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean        

    response-parameters:
      - name: push_schedules
        description: |
            A single-element array containing the newly-created scheduled push object.
        type: Array<PushSchedules>
      
    examples:

      - platform: android
        example: |
            Example Android call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                Map<String, Object> data = new HashMap<String, Object>();                
                JSONObject schedule = new JSONObject();
                schedule.put("name", "push schedule");
                schedule.put("start_time", "2015-09-05T10:11");

                JSONObject recurrence = new JSONObject();
                recurrence.put("interval", "weekly");
                recurrence.put("end_time", "2015-09-10T10:11");

                JSONObject push_notification = new JSONObject();
                push_notification.put("payload", "hello world");
                push_notification.put("channel","channelOne")

                schedule.put("recurrence", recurrence);
                schedule.put("push_notification", push_notification);                

                data.put("schedule", schedule);

                try {
                    APSPushSchedules.create(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                Log.i("APSPushSchedules", "Success!");
                            } else {
                                Log.e("APSPushSchedules", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSPushSchedules", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                  Log.e("APSPushSchedules", "Exception thrown: " + e.toString());
                }

      - platform: titanium
        example: |
            Available for Release 3.2.0 and later.

                Cloud.PushSchedules.create({
                    schedule: {
                        name: 'push schedule',
                        start_time: '2015-09-05T10:11',
                        recurrence: {
                            interval: 'weekly',
                            end_time: '2015-09-10T10:11'
                        },
                        push_notification: {
                        payload: 'hello world',
                        channel: 'channelOne'
                    }
                }, function(e) {
                    if (e.success) {
                        Ti.API.info('Success! \n id: ' + e.push_schedules[0].id);
                    } else {
                        Ti.API.error('Error: ' + ((e.error && e.message) || JSON.stringify(e)));
                    }
                });


      - platform: rest
        example: |
            The following example schedules a weekly push notification to be sent to devices that are located
            within 10 miles of Appcelerator corporate headquarters:

                curl -b cookies.txt -c cookies.txt -F 'schedule={"start_time":"2016-01-01T00:00", "name":"test", "push_notification":{"channel":"test","payload":"test schedule"}, "recurrence":{"interval":"weekly", "end_time":"2016-01-08T00:00"}}' -F 'where={"loc":{"$geoWithin":{"$centerSphere":[[-122.0507049560547,37.38685989379883] , 0.00252589 ]}}}' "https://api.cloud.appcelerator.com/v1/push_schedules/create.json?key=<APP-KEY>

            Example JSON response:

                {
                  "meta": {
                    "code": 200,
                    "status": "ok",
                    "method_name": "createPushSchedule"
                  },
                  "response": {
                    "push_schedules": [
                      {
                        "id": "535ac45b5714f50a99002e1e",
                        "name": "test",
                        "start_time": "2016-01-01T00:00:00+0000",
                        "push_notification": {
                          "channel": "test",
                          "payload": "test schedule",
                          "geo_condition": "{\"$geoWithin\":{\"$centerSphere\":[[-122.0507049560547,37.38685989379883],0.00252589]}}"
                        },
                        "recurrence": {
                          "interval": "weekly",
                          "end_time": "2016-01-08T00:00:00+0000"
                        }
                      }
                    ]
                  }
                }
