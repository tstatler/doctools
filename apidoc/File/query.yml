name: File
methods:
  - name: query
    summary: Custom Query Files
    description: |
        Perform custom query of files with sorting and paginating. Currently you can
        not query or sort data stored inside custom fields that have Array or Hash values.

        In addition to custom fields, here is a list of pre-defined fields in the File
        object that can be queried and sorted:
        
        *   `user_id: String`.  User ID of the File's owner.

        *   `created_at: Date`. Timestamp when the file was created. 

        *   `updated_at: Date`. Timestamp when the file was last updated.

    url: files/query.json

    parameters:
      - name: page  
        description: Request page number, default is 1.
        type: Number
      
      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. `limit` cannot be greater than 1000.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
        type: Number

      - name: where
        description: |
            Constraint values for fields. `where` should be encoded JSON.
            
            If `where` is not specified, `query` returns all objects. Please refer to 
            [using where query](#!/docs/search_query#where) for more information.
        type: String

      - name: order
        description: |
            Sort results by one or more fields. Please refer to 
            [using order in query](#!/guide/search_query#order) for more information
        type: String

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.  
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.  

            Default is 3, valid range is 1 to 8.
        type: Number

    response-parameters:
      - name: files
        description: |
            Array of file objects matching the search criteria.
        type: Array<File>

    examples:
      - platform: rest
        example: |
            Example cURL request:
            
                Example: Query files with name "Appcelerator Cloud Services"
                $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode  'where={"name":"Appcelerator Cloud Services"}' "https://api.cloud.appcelerator.com/v1/files/query.json?key=<YOUR APP APP KEY>"
                
            Example JSON response:
            
                $ curl -b c.txt -c c.txt -X GET --data-urlencode  'where=["user_id":"4f0fe764d9ca72833d000002", "name":"my_file"] "https://localhost/v1/files/query.json?key=<YOUR APP APP KEY>&order;=-created_at&per;_page=3"
                {
                  "meta": {
                    "code": 200,
                    "status": "ok",
                    "method_name": "queryFiles",
                    "page": 1,
                    "per_page": 3,
                    "total_pages": 1,
                    "total_results": 1
                  },
                  "response": {
                    "files": [
                      {
                        "id": "4f0fe787d9ca72833d000041",
                        "name": "test_file",
                        "processed": true,
                        "created_at": "2012-01-13T08:12:55+0000",
                        "updated_at": "2012-01-13T08:12:59+0000",
                        "url": "http://storage.appcelerator.comtest.cocoafish.com/Z6F6oHfp3IqPMT54XDbdo6KA/files/2a/26/4f0fe787d9ca72833d000041/cocoafish.pdf",
                        "user": {
                          "id": "4f0fe764d9ca72833d000002",
                          "first_name": "Abe",
                          "last_name": "Bob",
                          "created_at": "2012-01-13T08:12:20+0000",
                          "updated_at": "2012-01-13T08:12:43+0000",
                          "external_accounts": [
                
                          ],
                          "email": "a@mike.com"
                        }
                      }
                    ]
                  }
                }
                
            Refer to [Custom Fields on IOS](docs/search_query#ios) for more details.
            
      - platform: ios
        example: |
            Example iOS call:
            
                CCWhere *where = [[[CCWhere alloc] init] autorelease];
                [where fieldName:@"name" equalTo:@"test_file"];
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @"where", nil]
                request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"files/query.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.method isEqualToString:@"queryFiles"]) {
                		NSArray *files = [response getObjectsOfType:[CCFile class]];
                		for (CCFile *file in files)
                		{
                			...
                		}
                	}
                }
                
      - platform: android
        example: |
            Example Android call:
            
                Cocoafish sdk = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //Cocoafish sdk = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("where", "{'name':'Appcelerator Cloud Services'}");
                CCResponse response = sdk.sendRequest("files/query.json", CCRequestMethod.GET, data);
                
            SDK Callback:
            
                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "queryFiles".equals(meta.getMethod())) {
                  JSONArray files = responseJSON.getJSONArray("files");
                  ...
                }
                
      - platform: javascript
        example: |
            Example Javascript call:
            
                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  where: '{"name":"Appcelerator Cloud Services"}'
                };
                sdk.sendRequest('files/query.json', 'GET', data, callback);
                
            SDK Callback:
            
                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'queryFiles') {
                        var files = data.response.files;
                      }
                    }
                  }
                }
                
