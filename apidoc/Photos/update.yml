name: Photos
methods:
  - name: update
    summary: Update a Photo

    description: |
        Updates the photo attachment, the collection that the photo belongs to, or
        other photo properties. When replacing the existing photo attachment with a
        new one, `processing` will be set to `false`. However the existig URLs will
        remain valid until the new photo has been processed and uploaded to the
        Appcelerator Cloud Services storage cloud. At this time, the old URLs will be
        replaced with the URLs of the newly processed photo.  
          
        An application admin can update any Photo object.
        
    url: photos/update.json
    http-method: PUT
    login-required: true

    parameters:
      - name: photo_id
        description: ID of the photo to update.
        type: String
        required: true

      - name: photo
        description: |
            New photo to associate with this object, attached as a binary file.
        type: FileUpload
        required: true

      - name: title
        description: Photo title.
        type: String

      - name: collection_name
        description: |
            Name of the {@link PhotoCollections} to add this photo to. Replaces the
            existing collection, if any.
        type: String

      - name: collection_id
        description: |
            ID of the {@link PhotoCollections} to add this photo to. Replaces the existing
            collection, if any.
        type: String

      - name: tags
        description:  |
            Comma separated list of tags to associate with this photo. Overwrites any
            existing tags.
        type: String

      - name: custom_fields
        description: User-defined fields to add to this photo. See [Custom Data Fields](#!/guide/customfields).
        type: Hash

      - name: acl_name
        description: |
            Name of an {@link ACLs} to associate with this photo object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.

            To delete an ACL, set `acl_name` or `acl_id` to the empty string.
        type: String

      - name: acl_id
        description: |
            ID of an {@link ACLs} to associate with this photo object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: photo_sizes
        description: |
            User-defined photo sizes. See [Photo Uploading &
            Sizes](#!/guide/photosizes#custom).  Sizes be specified as a JSON object, or using a separate parameter for each
            size. To specify a photo size called "preview" using JSON:

                photo_size : { "preview" : "120x120#" } 

            To pass each size as a separate parameter, do *not* use the literal parameter name `photo_sizes`, 
            but add a parameter named `photo_sizes[`_sizeName_`]` for each custom photo
            size. The previous example in this format looks like this:

                "photo_size[preview]" : "120x120#"
        type: [ String, Hash ]


      - name: photo_sync_sizes
        description: |
            Synchronous photo sizes to upload. See [Photo Uploading & Sizes](#!/guide/photosizes#sync).

            The literal name for this parameter is `photo_sync_sizes[]`. This parameter can be specified 
            multiple times, once for each photo size that must be created before the request returns. 
            
            For example:

                "photo_sync_sizes[]=preview"

    response-parameters:
      - name: photos
        description: Single-element array containing the updated  photo.
        type: Array<Photos>

    examples:
      - platform: rest
        example: |
            Example cURL request:
            
                curl -b cookies.txt -c cookies.txt  -X PUT -F "photo=@photo.jpg" -F "photo_id=4d7e62d6d0afbe04170000a4" https://api.cloud.appcelerator.com/v1/photos/update.json?key=<YOUR APP APP KEY>
                
            Example JSON response:
            
                {
                  "meta": {
                    "status": "ok",
                    "code": 200,
                    "method_name": "updatePhoto"
                  },
                  "response": {
                    "photos": [
                      {
                        "id": "4e382fbed0afbe2495000006",
                        "filename": "photo.jpg",
                        "size": 584344,
                        "md5": "589b8ad43ed20bf8e622d719642bc939",
                        "created_at": "2011-08-02T17:11:26+0000",
                        "updated_at": "2011-08-02T17:11:40+0000",
                        "processed": false,
                        "content_type": "image/jpeg",
                        "urls": {
                          "square_75": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_square_75.jpg",
                          "thumb_100": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_thumb_100.jpg",
                          "small_240": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_small_240.jpg",
                          "medium_500": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_medium_500.jpg",
                          "medium_640": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_medium_640.jpg",
                          "large_1024": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_large_1024.jpg",
                          "original": "http://storage.appcelerator.com/HlSgny4cAWpKU8Mpypr3WGlE/photos/c9/39/4e382fbed0afbe2495000007/photo_original.jpg"
                        },
                        "exif": {
                          "create_date": "2010-06-21T02:19:20+0000",
                          "width": 1600,
                          "height": 1067,
                          "shutter_speed": "1/60",
                          "make": "Canon",
                          "model": "Canon EOS 5D Mark II"
                        }
                      }
                    ]
                  }
                }
                
      - platform: ios
        example: |
            Example iOS call:
            
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:(CCPhoto *)photo.objectId forKey:@"photo_id"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"photos/update.json" paramDict:paramDict];
                [request addPhotoUIImage:newImage paramDict:nil];
                [request startAsynchronous];
                [request release];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *photos = [response getObjectsOfType:[CCPhoto class]];
                	for (CCPhoto *photo in photos)
                	{
                		...
                	}
                }
                
      - platform: android
        example: |
            Example Android call:
            
                Cocoafish sdk = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //Cocoafish sdk = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("photo_id", "4d7e62d6d0afbe04170000a4");
                data.put("photo", new File("/photos/profile.gif"));
                CCResponse response = sdk.sendRequest("photos/update.json", CCRequestMethod.PUT, data);
                
            SDK Callback:
            
                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "updatePhoto".equals(meta.getMethod())) {
                  JSONArray photos = responseJSON.getJSONArray("photos");
                  ...
                }
                
      - platform: javascript
        example: |
            Example Javascript call:
            
                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  photo_id: '4d7e62d6d0afbe04170000a4',
                  photo: 'photoInput'  //the ID of file input control
                };
                sdk.sendRequest('photos/update.json', 'PUT', data, callback);
                
            SDK Callback:
            
                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'updatePhoto') {
                        var photos = data.response.photos;
                      	...
                      }
                    }
                  }
                }
                
      - platform: actionscript
        example: |
            Example Actionscript call:
            
                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                var data:Object = new Object();
                data.photo_id="4d7e62d6d0afbe04170000a4";
                data.photo = photo;	//instance of FileReference
                sdk.sendRequest("photos/update.json", URLRequestMethod.PUT, data, false, callback);
                
            SDK Callback:
            
                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "updatePhoto") {
                      	var photos:Array = data.response.photos;
                      	...
                      }
                    }
                  }
                }
                
