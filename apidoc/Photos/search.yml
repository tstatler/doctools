name: Photos
methods:
  - name: search
    summary: Seach for Photos

    description: |
        Searches for photos with sorting and paginating.

    url: photos/search.json

    parameters:
      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: response_json_depth
        description: |
            Nested object depth level counts in response JSON.

            In order to reduce server API calls from an applicaton, the response JSON may
            include not just the objects that are being queried/searched, but also
            some important data related to the returned objects such as object's owner or
            referenced objects.

            Default is 3, valid range is 1 to 8.
        type: Number
        
      - name: pretty_json
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean

    response-parameters:
      - name: photos
        description: List of photos matching the search parameters.
        type: Array<Photos>

    examples:
      - platform: titanium
        example: |
            This example searches for photos and checks the response.

                Cloud.Photos.search({
                    user_id: savedUserId
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.photos.length);
                        for (var i = 0; i < e.photos.length; i++) {
                            var photo = e.photos[i];
                            alert('id: ' + photo.id + '\n' +
                                  'name: ' + photo.name + '\n' +
                                  'filename: ' + photo.filename + '\n' +
                                  'updated_at: ' + photo.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt "https://api.cloud.appcelerator.com/v1/photos/search.json?key=<YOUR APP APP KEY>&pretty_json=true"

            Example JSON response:

                {
                  "meta": {
                    "code": 200,
                    "status": "ok",
                    "method_name": "searchPhotos",
                    "page": 1,
                    "per_page": 10,
                    "total_pages": 1,
                    "total_results": 1
                  },
                  "response": {
                    "photos": [
                      {
                        "id": "506f8146b8811092c3000294",
                        "filename": "Screen Shot 2012-10-05 at 5.09.38 PM.png",
                        "size": 24915,
                        "md5": "3fd3ac2d17b39ce7bfc42a730b2b5b5c",
                        "created_at": "2012-10-06T00:54:32+0000",
                        "updated_at": "2012-10-06T00:54:37+0000",
                        "processed": true,
                        "user": {
                          "id": "5012ffd4b881100692000947",
                          "first_name": "a",
                          "last_name": "aa",
                          "created_at": "2012-07-27T20:53:42+0000",
                          "updated_at": "2012-09-13T21:13:49+0000",
                          "external_accounts": [

                          ],
                          "confirmed_at": "2012-07-27T20:53:40+0000",
                          "username": "aaa",
                          "email": "aaa@cocoafish.com",
                          "admin": "false"
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                [APSPhotos search:nil withBlock:^(APSResponse *e) {
                    if (e.success) {
                        NSString *message = [NSString stringWithFormat:@"Found %lu photos", (unsigned long)((NSArray *)e.response[@"photos"]).count ];
                        [[[UIAlertView alloc] initWithTitle:@"Success!" message:message delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                    } else {
                        [[[UIAlertView alloc] initWithTitle:@"Error" message:e.message delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];                        
                    }
                }];

      - platform: ios-acssdk
        example: |
            Example iOS call:

                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:2];
                [pramDict setObject:(CCPlace *)place.objectId forKey:@"place_id"];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"photos/search.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                  if ([response.meta.method isEqualToString:@"searchPhotos"]) {
                    NSArray *photos = [response getObjectsOfType:[CCPhoto class]];
                    for (CCPhoto *photo in photos)
                    {
                      ...
                    }
                  }
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("place_id", "4d7e62d6d0afbe04170000a4");

                try {
                    APSPhotos.search(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray photos = e.getResponse().getJSONArray("photos");
                                    if (photos.length() <= 0) {
                                        Log.i("APSPhotos", "No results!");
                                    } else {
                                        for (int i = 0; i < photos.length(); i++) {
                                            JSONObject photo = photos.getJSONObject(i);
                                            Log.i("APSPhotos", photo.getString("filename"));
                                        }
                                    }
                                } catch (JSONException err) {
                                    Log.e("APSPhotos", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSPhotos", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSPhotos", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSPhotos", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("place_id", "4d7e62d6d0afbe04170000a4");
                //data.put("user_id", "4d7e62d6d0afbe04170000a4");
                CCResponse response = sdk.sendRequest("photos/search.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "searchPhotos".equals(meta.getMethod())) {
                  JSONArray photos = responseJSON.getJSONArray("photos");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  place_id: '4d7e62d6d0afbe04170000a4'
                  //user_id: '4d7e62d6d0afbe04170000a4'
                };
                sdk.sendRequest('photos/search.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'searchPhotos') {
                        var photos = data.response.photos;
                        ...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.place_id="4d7e62d6d0afbe04170000a4";
                //data.user_id="4d7e62d6d0afbe04170000a4";
                sdk.sendRequest("photos/search.json", URLRequestMethod.GET, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "searchPhotos") {
                        var photos:Array = data.response.photos;
                        ...
                      }
                    }
                  }
                }

