name: Chats
methods:
  - name: query
    summary: Custom Query Chat Messages
    description: |
        Performs a custom query of chat messages with sorting and pagination. Currently you can
        not query or sort data stored inside array or hash in custom fields.
    url: chats/query.json
    parameters: 
      - name: participate_ids
        description: |
            Comma-separated list of user ID(s) of the users belonging to a chat group. You can use
            this field to narrow down a query to a certain chat group. The current user can
            only query chat messages in chat groups he or she is participating in. 
            
            For example, suppose that users A, B and C form one chat group, and users B and C form a second chat group without A.
            User A does not have permission to query chats in the chat group that consists of
            only users B and C.

            Alternatively, you can use `chat_group_id` to identify a {@link Chats#property-chatgroup chat group} instead.
        type: String

      - name: chat_group_id
        description: |
            A chat group's id. Instead of using a `participate_ids` list, if you already
            know the id of a chat group, you can use it to narrow down a query.

      - name: page  
        description: Request page number, default is 1.
        type: Number
      
      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. `limit` cannot be greater than 1000.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
        type: Number

      - name: where
        description: |
            Constraint values for fields. `where` should be encoded JSON.

            You can query any of the standard values for a Chat object, as well as any
            custom fields that contain simple values, such as String, Number or Boolean
            values.
            
            If `where` is not specified, `query` returns all objects. Please refer to 
            [using where query](#!/guide/search_query#where) for more information.
        type: String

      - name: order
        description: |
            Sort results by one or more fields. Please refer to 
            [using order in query](#!/guide/search_query#order) for more information
        type: String

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.  
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.  

            Default is 3, valid range is 1 to 8.
        type: Number

    response-parameters:
      - name: chats
        description: | 
            List of chat objects matching the query.
        type: Array<Chats>

    examples:
      - platform: titanium
        example: |
            This example requests a list of chat messages and checks the response.
            
                Cloud.Chats.query({
                    participate_ids: ids.join(','),
                    where: {
                        updated_at: { '$gt': last_update_time }
                    }
                }, function (e) {
                    if (e.success) {
                        for (var i = 0; i < e.chats.length; i++) {
                            var chat = e.chats[i];
                            alert('Success:\n' +
                                'From: ' + chat.from.first_name + ' ' + chat.from.last_name + '\n' +
                                'Updated: ' + chat.updated_at + '\n' +
                                'Message: ' + chat.message);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:
            
                Example: If each chat message has a geo location assigned, now we are trying to find chat messages among user Bob(id:4ee05d69d9ca726b85000002) and user Alice(id:4ee05d69d9ca726b85000003) and userJoe (id:4ee05d69d9ca726b85000004) sent after 2011-11-17T22:53:48+0000 near latitude 37.12 and longitude -122.23 with max distance 5 miles(We need to convert 5 miles to radians by 5/3959 = 0.00126).
                
                $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'participate_ids=4ee05d69d9ca726b85000002,4ee05d69d9ca726b85000003,4ee05d69d9ca726b85000004' --data-urlencode 'where={"created_at":{"$gte":"2011-11-17T22:53:48+0000"}, "coordinates":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}' --data-urlencode 'order=created_at' "https://api.cloud.appcelerator.com/v1/users/query.json?key=<YOUR APP APP KEY>"
                
            Example JSON response:
            
                {
                  "meta": {
                    "code": 200,
                    "status": "ok",
                    "method_name": "queryChatMessages",
                    "page": 1,
                    "per_page": 10,
                    "total_pages": 1,
                    "total_results": 1
                  },
                  "response": {
                    "chats": [
                      {
                        "id": "4ee05d6ad9ca726b85000018",
                        "created_at": "2011-12-08T06:47:06+0000",
                        "updated_at": "2011-12-08T06:47:06+0000",
                        "message": "What's up?",
                		 "custom_fields": {
                	       "coordinates": [-122.23, 37.12] }
                	     },
                        "from": {
                          "id": "4ee05d69d9ca726b85000002",
                          "first_name": "Bob",
                          "last_name": "Dude",
                          "created_at": "2011-12-08T06:47:05+0000",
                          "updated_at": "2011-12-08T06:47:06+0000",
                          "external_accounts": [
                
                          ],
                          "username": "bob",
                          "email": "bob@dude.com"
                        },
                        "chat_group": {
                          "id": "4ee05d6ad9ca726b85000017",
                          "created_at": "2011-12-08T06:47:06+0000",
                          "updated_at": "2011-12-08T06:47:06+0000",
                          "participate_users": [
                            {
                              "id": "4ee05d69d9ca726b85000002",
                              "first_name": "Bob",
                              "last_name": "Dude",
                              "created_at": "2011-12-08T06:47:05+0000",
                              "updated_at": "2011-12-08T06:47:06+0000",
                              "external_accounts": [
                
                              ],
                              "username": "bob",
                              "email": "bob@dude.com"
                            },
                            {
                              "id": "4ee05d69d9ca726b85000003",
                              "first_name": "Alice",
                              "last_name": "Gal",
                              "created_at": "2011-12-08T06:47:05+0000",
                              "updated_at": "2011-12-08T06:47:05+0000",
                              "external_accounts": [
                
                              ],
                              "username": "alice",
                              "email": "alice@gal.com"
                            },
                            {
                              "id": "4ee05d69d9ca726b85000004",
                              "first_name": "Joe",
                              "last_name": "Guy",
                              "created_at": "2011-12-08T06:47:05+0000",
                              "updated_at": "2011-12-08T06:47:05+0000",
                              "external_accounts": [
                
                              ],
                              "username": "joe",
                              "email": "joe@guy.com"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
                
            Refer to [Custom Fields on IOS](docs/search_query#ios) for more details.
            
      - platform: ios
        example: |
            Example iOS call:
            
                CCWhere *where = [[[CCWhere alloc] init] autorelease];
                [where fieldName:@"coordinates" nearLat:37.12 nearLng:-122.23 maxDistanceMi:5.0];
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @"where", [NSArray arrayWithObjects:@"4e02f5b8d0afbe43c1000003", @"4e02f5b8d0afbe43c1000002", @"4ee05d69d9ca726b85000004", nil], @"participate_ids", @"created_at", @"order", nil];
                request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"chats/query.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.methodName isEqualToString:@"queryChatMessages"]) {
                		NSArray *chats = [response getObjectsOfType:[CCChat class]];
                		for (CCChat *chat in chats) {
                			...
                		}
                	}
                }
                
      - platform: android
        example: |
            Example Android call:
            
                Cocoafish sdk = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //Cocoafish sdk = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("participate_ids", "4ee05d69d9ca726b85000002,4ee05d69d9ca726b85000003,4ee05d69d9ca726b85000004");
                data.put("where", "{'created_at':{'$gte':'2011-11-17T22:53:48+0000'}, 'coordinates':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}");
                data.put("order", "created_at");
                CCResponse response = sdk.sendRequest("chats/query.json", CCRequestMethod.GET, data);
                
            SDK Callback:
            
                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "queryChatMessages".equals(meta.getMethod())) {
                  JSONArray chats = responseJSON.getJSONArray("chats");
                  ...
                }
                
      - platform: javascript
        example: |
            Example Javascript call:
            
                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  participate_ids: '4ee05d69d9ca726b85000002,4ee05d69d9ca726b85000003', 
                  where: '{"created_at":{"$gte":"2011-11-17T22:53:48+0000"}, "coordinates":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}',
                  order: 'created_at'
                };
                sdk.sendRequest('chats/query.json', 'GET', data, callback);
                
            SDK Callback:
            
                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'queryChatMessages') {
                        var chats = data.response.chats;
                      	...
                      }
                    }
                  }
                }
                
