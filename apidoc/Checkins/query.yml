name: Checkins
methods:
  - name: query
    summary: Custom Query Checkins

    description: |
        Performs a custom query of checkins with sorting and pagination. Currently you
        can not query or sort data stored inside array or hash in custom fields.

        For details about using the query parameters,
        see the [Search and Query guide](#!/guide/search_query).
    url: checkins/query.json
    parameters:

      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. `limit` cannot be greater than 1000.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
        type: Number

      - name: where
        description: |
            Constraint values for fields. `where` should be encoded JSON.

            If `where` is not specified, `query` returns all objects.
        type: Hash

      - name: order
        description: |
            Sort results by one or more fields.
        type: String

      - name: sel
        description: |
            Selects the object fields to display. Do not use this parameter with `unsel`.
        type: Hash

      - name: show_user_like
        description: |
            If set to **true**, each Checkin object in the response includes "current_user_liked: true"`
            if the current user has liked the object. If the user has not liked the object, the
            `current_user_liked` field is not included in the response.
        type: Boolean

      - name: unsel
        description: |
            Selects the object fields NOT to display. Do not use this parameter with `sel`.
        type: Hash

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.

            Default is 3, valid range is 1 to 8.
        type: Number

    response-parameters:
      - name: checkins
        description: List of checkins matching the query parameters.
        type: Array<Checkins>

    examples:
      - platform: titanium
        example: |
            This example requests information about checkins and checks the response.

                Cloud.Checkins.query({
                    page: 1,
                    per_page: 20,
                    order: '-updated_at'
                }, function (e) {
                    if (e.success) {
                        for (var i = 0; i < e.checkins.length; i++) {
                            var checkin = e.checkins[i];
                            alert('Success:\n' +
                               'id: ' + checkin.id + '\n' +
                               'place: ' + checkin.place.name + '\n' +
                               'updated_at: ' + checkin.updated_at + '\n' +
                               'user: ' + checkin.user.first_name + ' ' + checkin.user.last_name);
                         }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            The following cURL request searches checkins by location, if your app assigned a geographic
            location to each checkin (see [Geographic Coordinates in Custom Fields](#!/guide/customfields-section-geographic-coordinates-in-custom-fields).

            The request includes `show_user_like=true` as a query string parameter. The sample JSON response 
            includes a single Checkins object that contains `"current_user_liked":"true"`, 
            indicating that the current user has liked this object.

                $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={"coordinates":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}' "https://api.cloud.appcelerator.com/v1/checkins/query.json?key=<YOUR APP APP KEY>&show_user_like=true"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"queryCheckins",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":1
                  },
                  "response": {
                    "checkins": [
                      {
                        "id":"4d713b4f6f70951043000001",
                        "message":"Try the grilled steak burrito",
                        "created_at":"2011-03-04T19:19:43+0000",
                        "updated_at":"2011-03-04T19:19:43+0000",
                        "custom_fields": {
                          "coordinates": [-122.23, 37.12] }
                        },
                        "current_user_liked": true,
                        "place": {
                          "id":"4d6f13e96f70953608000012",
                          "name":"Maya Restaurant",
                          "created_at":"2011-03-03T04:07:05+0000",
                          "updated_at":"2011-03-03T04:07:05+0000",
                          "address":"303 2nd Street",
                          "city":"San Francisco",
                          "state":"CA",
                          "country":"United States",
                          "phone":"(415) 543-2928",
                          "lat":37.784732,
                          "lng":-122.395441
                        },
                        "user": {
                          "id":"4d6e77386f70950c89000001",
                          "first_name":"Michael",
                          "last_name":"Goff",
                          "created_at":"2011-03-02T16:58:32+0000",
                          "updated_at":"2011-03-02T17:51:42+0000"
                        },
                        "photo": {
                          "id":"4d713b4f6f70951043000002",
                          "filename":"photo.jpg",
                          "size":584344,
                          "md5":"589b8ad43ed20bf8e622d719642bc939",
                          "created_at":"2011-03-04T19:19:43+0000",
                          "updated_at":"2011-03-04T19:19:47+0000",
                          "processed":true,
                          "content_type":"image/jpeg",
                          "urls": {
                            "square_75":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_square_75.jpg",
                            "thumb_100":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_thumb_100.jpg",
                            "small_240":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_small_240.jpg",
                            "medium_500":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_medium_500.jpg",
                            "medium_640":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_medium_640.jpg",
                            "large_1024":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_large_1024.jpg",
                            "original":"http://storage.appcelerator.com/osxW8CUVzwuIlxjJZC1HS8hJdc3mV9ON/photos/4d713b4f6f70951043000002/photo_original.jpg"
                          }
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                CCWhere *where = [[[CCWhere alloc] init] autorelease];
                [where fieldName:@"coordinates" nearLat:37.12 nearLng:-122.23 maxDistanceMi:5.0];
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @"where", nil]
                request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"checkins/query.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.methodName isEqualToString:@"queryCheckins"]) {
                		NSArray *checkins = [response getObjectsOfType:[CCCheckin class]];
                		for (CCCheckin *checkin in checkins) {
                			...
                		}
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                HashMap<String,Object> data = new HashMap<String,Object>;
                JSONObject params = new JSONObject("{'coordinates': {'$nearSphere': [-122.1,37.1], '$maxDistance': 0.00126}}");
                data.put("where", params);

                try {
                    APSCheckins.query(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray checkins = e.getResponse().getJSONArray("checkins");
                                    if (checkins.length() <= 0) {
                                        Log.i("APSCheckins", "No Results!");
                                    } else {
                                        // Do something with the checkins array
                                    }
                                } catch (JSONException err) {
                                       Log.e("APSCheckins", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSCheckins", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(APSCloudException e) {
                            Log.e("APSCheckins", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSCheckins", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("where", "{'coordinates':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}");
                CCResponse response = sdk.sendRequest("checkins/query.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "queryCheckins".equals(meta.getMethod())) {
                  JSONArray checkins = responseJSON.getJSONArray("checkins");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  where: '{"coordinates":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}'
                };
                sdk.sendRequest('checkins/query.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'queryCheckins') {
                        var checkins = data.response.checkins;
                        ...
                      }
                    }
                  }
                }

