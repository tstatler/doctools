name: Places
methods:
  - name: create
    summary: Create a Place

    description: |
        Creates a new place object.

        To create a place, you must specify at least one of the following:
        address, city, state, postal_code, country, or geographical coordinates (longitude and latitude).

    url: places/create.json
    http-method: POST
    login-required: true

    parameters:

      - name: name
        description: Place name.
        type: String
        required: true

      - name: address
        description: Address.
        type: String

      - name: city
        description: City.
        type: String

      - name: state
        description: State.
        type: String

      - name: postal_code
        description: Postal or ZIP code.
        type: String

      - name: country
        description: Country.
        type: String

      - name: latitude
        description: Latitude.
        type: Number

      - name: longitude
        description: Longitude.
        type: Number

      - name: website
        description: Website URL.
        type: String

      - name: twitter
        description: Twitter ID.
        type: String

      - name: phone_number
        description: Phone number.
        type: String

      - name: photo
        description: |
            New photo to attach as the primary photo for this place.

            When you use the `photo` parameter to attach a new photo, you can use the
            [custom resize and sync options](#!/guide/photosizes).
        type: Photos

      - name: photo_id
        description: |
            ID of an existing photo to attach as the primary photo for this place.
        type: String

      - name: tags
        description:  |
            Comma separated list of tags for this place.
        type: String

      - name: custom_fields
        description: User defined fields. See [Custom Data Fields](#!/guide/customfields).
        type: [ String, Hash ]

      - name: acl_name
        description: |
            Name of an {@link ACLs} to associate with this place object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: acl_id
        description: |
            ID of an {@link ACLs} to associate with this place object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: user_id
        description: |
            User ID to create this place on behalf of.

            The current login user must be an application admin to create a place on
            behalf of another user.
        type: String
        
      - name: pretty_print
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean

    response-parameters:
      - name: places
        description: Single-element array containing the newly-created place.
        type: Array<Places>

    examples:
      - platform: titanium
        example: |
            This example creates a new place and checks the response.

                Cloud.Places.create({
                    name: 'Appcelerator HQ',
                    state: 'California',
                    website: 'http://www.appcelerator.com'
                }, function (e) {
                    if (e.success) {
                        var place = e.places[0];
                        alert('Success:\n' +
                            'id: ' + place.id + '\n' +
                            'name: ' + place.name + '\n' +
                            'updated_at: ' + place.updated_at);
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -F "name=Appcelerator Cloud Services" -F "photo=@photo.jpg" -F "address=58 South Park Ave." -F "city=San Francisco" -F "state=California" -F "postal_code=94107-1807" -F "country=United States" -F "latitude=37.782227" -F "longitude=-122.393159" -F "twitter=acs" -F "website=http://cocoafish.com" https://api.cloud.appcelerator.com/v1/places/create.json?key=<YOUR APP APP KEY>&pretty_print=true

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"createPlace"
                  },
                  "response": {
                    "places": [
                      {
                        "id":"4d8910aed0afbe0e4e000006",
                        "name":"Appcelerator Cloud Services",
                        "created_at":"2011-03-22T21:12:14+0000",
                        "updated_at":"2011-03-22T21:12:14+0000",
                        "address":"58 South Park Ave.",
                        "city":"San Francisco",
                        "state":"California",
                        "postal_code":"94107-1807",
                        "country":"United States",
                        "website":"http://www.appcelerator.com",
                        "twitter":"acs",
                        "lat":37.782227,
                        "lng":-122.393159,
                        "photo": {
                          "id":"4dcf261cd0afbe1833000002",
                          "filename":"photo.jpg",
                          "size":584344,
                          "md5":"589b8ad43ed20bf8e622d719642bc939",
                          "created_at":"2011-05-15T01:02:20+0000",
                          "updated_at":"2011-05-15T01:02:20+0000",
                          "processed":false
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:@"Appcelerator Cloud Services" forKey:@"name"];
                [paramDict setObject:@"58 South Park Ave" forKey:@"address"];
                [paramDict setObject:@"San Francisco" forKey:@"city"];
                [paramDict setObject:@"California" forKey:@"state"];
                [paramDict setObject:@"94107" forKey:@"postal_code"];
                [paramDict setObject:@"United States" forKey:@"country"];
                [paramDict setObject:@"http://www.appcelerator.com" forKey:@"website"];
                [paramDict setObject:@"acs" forKey:@"twitter"];
                [paramDict setObject:@"37.782227" forKey:@"latitude"];
                [paramDict setObject:@"-122.393159" forKey:@"longitude"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"places/create.json" paramDict:paramDict];
                [request addPhotoUIImage:(UIImage *)placeImage paramDict:nil];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *places = [response getObjectsOfType:[CCPlace class]];
                	for (CCPlace *place in places)
                	{
                		...
                	}
                }

      - platform: android
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("name", "Cocofish Inc");
                data.put("address", "Cocofish Inc");
                data.put("city", "San Francisco");
                CCResponse response = sdk.sendRequest("places/create.json", CCRequestMethod.POST, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "createPlace".equals(meta.getMethod())) {
                  JSONArray places = responseJSON.getJSONArray("places");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  name: 'Cocofish Inc',
                  address: 'Cocofish Inc',
                  city: 'San Francisco'
                };
                sdk.sendRequest('places/create.json', 'POST', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'createPlace') {
                        var places = data.response.places;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.name = "Cocofish Inc";
                data.address = "Cocofish Inc";
                data.city = "San Francisco";
                sdk.sendRequest("places/create.json", URLRequestMethod.POST, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "createPlace") {
                      	var places:Array = data.response.places;
                      	...
                      }
                    }
                  }
                }

