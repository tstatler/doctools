name: PhotoCollections
methods:
  - name: show_subcollections
    summary: Show Subcollections
    description: |
        Show subcollections of a collection.

    url: collections/show/subcollections.json

    parameters:

      - name: collection_id
        description: ID of the collection to retrieve photos from.
        type: String
        required: true

      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: response_json_depth
        description: |
            Nested object depth level counts in the response JSON.

            In order to reduce server API calls from an applicaton, the response JSON may
            include not just the objects that are being queried/searched, but also
            some important data related to the returned objects such as the object's owner or
            referenced objects.

            Default is 3, valid range is 1 to 8.
        type: Number

    response-parameters:
      - name: collections
        description: List of subcollections in this collection.
        type: Array<PhotoCollections>

    examples:
      - platform: titanium
        example: |
            This example requests a list of photo subcollections and checks the response.

                Cloud.PhotoCollections.showSubcollections({
                    page: 1,
                    per_page: 20,
                    collection_id: savedCollectionId
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.collections.length);
                        for (var i = 0; i < e.collections.length; i++) {
                            var collection = e.collections[i];
                            alert('Success:\n' +
                                'id: ' + collection.id + '\n' +
                                'name: ' + collection.name + '\n' +
                                'count: ' + collection.counts.total_photos + '\n'
                                'updated_at: ' + collection.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt "https://api.cloud.appcelerator.com/v1/collections/show/subcollections.json?key=<YOUR APP APP KEY>&collection_id=4e004df9d0afbe2f18000010"

            Example JSON response:

                {
                  "meta": {
                    "total_pages": 1,
                    "code": 200,
                    "method_name": "showCollectionSubcollections",
                    "page": 1,
                    "total_results": 2,
                    "per_page": 10,
                    "status": "ok"
                  },
                  "response": {
                    "collections": [
                      {
                        "name": "Subcollection 1",
                        "cover_photo": {
                          "created_at": "2011-06-21T07:53:29+0000",
                          "size": 584344,
                          "urls": {
                            "medium_640": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_640.jpg",
                            "medium_500": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_medium_500.jpg",
                            "small_240": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_small_240.jpg",
                            "square_75": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_square_75.jpg",
                            "large_1024": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_large_1024.jpg",
                            "original": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_original.jpg",
                            "thumb_100": "http://storage.appcelerator.com/VK9m9DEwQlkpcUX8YNveg6tU/photos/c9/39/4e004df9d0afbe2f18000013/photo_thumb_100.jpg"
                          },
                          "content_type": "image/jpeg",
                          "updated_at": "2011-06-21T07:53:36+0000",
                          "processed": true,
                          "id": "4e004df9d0afbe2f18000012",
                          "exif": {
                            "create_date": "2010-06-21T02:19:20+0000"
                          },
                          "filename": "photo.jpg",
                          "md5": "589b8ad43ed20bf8e622d719642bc939"
                        },
                        "created_at": "2011-06-21T07:53:29+0000",
                        "updated_at": "2011-06-21T07:53:29+0000",
                        "id": "4e004df9d0afbe2f18000011",
                        "user": {
                          "created_at": "2011-06-21T07:53:15+0000",
                          "updated_at": "2011-06-21T07:53:29+0000",
                          "username": "bob",
                          "id": "4e004debd0afbe2f18000009",
                          "last_name": "Dude",
                          "email": "bob@dude.com",
                          "first_name": "Bob"
                        },
                        "counts": {
                          "photos": 1,
                          "total_photos": 1,
                          "subcollections": 0
                        }
                      },
                      {
                        "name": "Subcollection 2",
                        "created_at": "2011-06-21T07:53:38+0000",
                        "updated_at": "2011-06-21T07:53:38+0000",
                        "id": "4e004e02d0afbe2f18000015",
                        "user": {
                          "created_at": "2011-06-21T07:53:15+0000",
                          "updated_at": "2011-06-21T07:53:29+0000",
                          "username": "bob",
                          "id": "4e004debd0afbe2f18000009",
                          "last_name": "Dude",
                          "email": "bob@dude.com",
                          "first_name": "Bob"
                        },
                        "counts": {
                          "photos": 0,
                          "total_photos": 0,
                          "subcollections": 0
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:(CCCollection *)collection.objectId forKey:@"collection_id"];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"collections/show/subcollections.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *collections = [response getObjectsOfType:[CCCollection class]];
                	for (CCCollection *collection in collections) {
                		...
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');
                final Activity currentActivity = this;

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("collection_id", "4e013938d0afbe3896000009");

                try {
                    APSPhotoCollections.showSubcollections(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray collections = e.getResponse().getJSONArray("collections");
                                    if (collectionss.length() <= 0) {
                                        Log.i("APSPhotoCollections", "No Results!");
                                    } else {
                                        for (int i = 0; i < collections.length(); i++) {
                                            JSONObject collection = collections.getJSONObject(i);
                                            Log.i("APSPhotoCollections", collection.getString("name"));
                                        }
                                    }
                                } catch (JSONException err) {
                                       Log.e("APSPhotoCollections", "Exception thrown: " + err.toString());
                                }

                            } else {
                                Log.e("APSPhotoCollections", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSPhotoCollections", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSPhotoCollections", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("collection_id", "4e004df9d0afbe2f18000010");
                CCResponse response = sdk.sendRequest("collections/show/subcollections.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showCollectionSubcollections".equals(meta.getMethod())) {
                  JSONArray collections = responseJSON.getJSONArray("collections");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  collection_id: '4e004df9d0afbe2f18000010'
                };
                sdk.sendRequest('collections/show/subcollections.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'showCollectionSubcollections') {
                        var collections = data.response.collections;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.collection_id = "4e004df9d0afbe2f18000010";
                sdk.sendRequest("collections/show/subcollections.json", URLRequestMethod.GET, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "showCollectionSubcollections") {
                      	var collections:Array = data.response.collections;
                      	...
                      }
                    }
                  }
                }

