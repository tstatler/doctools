name: Event
methods:
  - name: create
    summary:
## Events: Create Event

    description: |
        Create an event. Times given with time zones other than UTC (for example PST
        during daylight savings is -0700) will be converted to UTC. An ical string
        will be returned to represent the occurrences of the event.  
          
        For the event that is set as a recurring event, once created, there will be
        several "event occurrences" created associating with the event object on
        server side, one "event occurrence" represents a single occurrence of the
        recurring event. An "event occurrence" contains start and end time of the
        event's occurrence which are calculated according to the "recurring" settings
        of the event object.  
        Instead of computing actual individual occurrences of a recurring event on the
        client side, you can use event occurrences query api to get a list of
        occurrences associated of a repeating event.  
        To get all "event occurrence" of an recurring event object, you can use [show
        event occurrence](/docs/api/v1/events/show_occurrences) API with providing an
        event's `id`.
        
    url: events/create.json
    http-method: POST
    login-required: true
    parameters:

      - name: name
        description: Event name.
        type: String
        required: true
      
      - name: start_time
        description: Event start time.
        type: Date
        required: true
    
      - name: details
        description: Description of the event.
        type: String
        
      - name: duration
        description: Event duration, in seconds.
        type: Number
    
      - name: ical
        description: Event time and recurrance in iCalendar (RFC 5545) format.
        type: String
    
      - name: recurring
        description: |
            Recurrance schedule. Can take the following values: "daily", "weekly", "monthly", or "yearly".

            Must be used together with `recurring_count` or `recurring_until` to limit the
            number of occurances. The total number of occurrences of an event in either
            case is limited to 1000.
        type: String
    
      - name: recurring_count
        description: Number of occurrences for the event. 
        type: Number
    
      - name: recurring_until
        description: Date of last recurrance. 
        type: Date
    
      - name: user
        description: Event owner.
        type: User
    
      - name: place_id
        description: ID for the {@link Place} where the event takes place.
        type: String

      - name: photo 
        description: |
            New photo to attach as the primary photo for the event.
    
            When you use the `photo` parameter to attach a new photo, you can use the 
            [custom resize and sync options](#!/guide/photosizes).
        type: Photo
      
      - name: photo_id
        description: |
            ID of an existing photo to attach as the primary photo for the event.
        type: String

      - name: tags
        description:  |
            Comma separated list of tags for this event.
        type: String

      - name: custom_fields
        description: User defined fields. See [Custom Data Fields](#!/guide/customfields).
        type: [ String, Hash ]

      - name: acl_name
        description: |
            Name of an {@link ACL} to associate with this event.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: acl_id
        description: |
            ID of an {@link ACL} to associate with this event.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: tags
        description: Comma-separated list of tags associated with this event.
        type: String

      - name: user_id
        description: |
            User ID to create the event on behalf of.

            The current login user must be an application admin to create an event on
            behalf of another user.
        type: String

    response-parameters:
      - name: events
        description: Single-element array containing the newly-created event.
        type: Array<Event>

    examples:
      - platform: rest
        example: |
            Example cURL request:
            
                $ curl -b cookies.txt -c cookies.txt -F "name=Appcelerator Meetup Group" -F "photo=@photo.jpg" -F "place_id=4d7e62d6d0afbe04170000a4" -F "start_time=2011-03-22T20:59:50+0000" -F "duration=3600" https://api.cloud.appcelerator.com/v1/events/create.json?key=<YOUR APP APP KEY>
                
            Example JSON response:
            
                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"createEvent"
                  },
                  "response": {
                    "events": [
                      {
                        "id":"4d870f8bd0afbe1074000017",
                        "name":"Appcelerator Meetup Group",
                        "created_at":"2011-03-21T08:42:51+0000",
                        "updated_at":"2011-03-21T08:42:51+0000",
                        "start_time": "2011-03-22T20:59:50+0000",
                        "duration": 3600,
                        "created_at": "2011-09-12T20:07:23+0000",
                        "updated_at": "2011-09-12T20:07:23+0000",
                        "ical": "DTSTART:20110322T205950Z\nDURATION:PT1H\nRRULE:FREQ=WEEKLY;COUNT=10",
                        "recurring": "weekly",
                        "recurring_count": 10,
                        "num_occurrences": 10,
                        "user": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "place": {
                          "id":"4d7e62d6d0afbe04170000a4",
                          "name":"Maya Restaurant",
                          "created_at":"2011-03-14T18:47:50+0000",
                          "updated_at":"2011-03-14T18:47:50+0000",
                          "address":"303 2nd Street",
                          "city":"San Francisco",
                          "state":"CA",
                          "country":"United States",
                          "phone":"(415) 543-2928",
                          "latitude":37.784732,
                          "longitude":-122.395441
                        },
                        "photo": {
                          "id":"4dcf5385d0afbe1833000009",
                          "filename":"photo.jpg",
                          "size":584344,
                          "md5":"589b8ad43ed20bf8e622d719642bc939",
                          "created_at":"2011-05-15T04:16:05+0000",
                          "updated_at":"2011-05-15T04:16:05+0000",
                          "processed":false
                        }
                      }
                    ]
                  }	
                }
                
      - platform: ios
        example: |
            Example iOS call:
            
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:@"Appcelerator Happy Hour" forKey:@"name"];
                [paramDict setObject:[NSDate date] forKey:@"start_time"];
                [paramDict setObject:@"3600" forKey:@"duration"];
                [paramDict setObject:(CCPlace *)place.objectId forKey:@"place_id"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"events/create.json" paramDict:paramDict];
                [request addPhotoUIImage:image paramDict:nil];
                [request startAsynchronous];
                [request release];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.method isEqualToString:@"createEvent"]) {
                		NSArray *events = [response getObjectsOfType:[CCEvent class]];
                		for (CCEvent *event in events)
                		{
                			...
                		}
                	}
                }
                
      - platform: android
        example: |
            Example Android call:
            
                Cocoafish sdk = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //Cocoafish sdk = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("start_time", "2011-03-22T20:59:50+0000");
                data.put("duration", "3600");
                data.put("name", "Appcelerator Meetup Group");
                data.put("place_id", "4d7e62d6d0afbe04170000a4");
                CCResponse response = sdk.sendRequest("events/create.json", CCRequestMethod.POST, data);
                
            SDK Callback:
            
                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "createEvent".equals(meta.getMethod())) {
                  JSONArray events = responseJSON.getJSONArray("events");
                  ...
                }
                
      - platform: javascript
        example: |
            Example Javascript call:
            
                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  start_time: '2011-03-22T20:59:50+0000',
                  duration: '3600',
                  name: 'Appcelerator Meetup Group',
                  place_id: '4d7e62d6d0afbe04170000a4'
                };
                sdk.sendRequest('events/create.json', 'POST', data, callback);
                
            SDK Callback:
            
                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'createEvent') {
                        var events = data.response.events;
                      	...
                      }
                    }
                  }
                }
                
      - platform: actionscript
        example: |
            Example Actionscript call:
            
                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                var data:Object = new Object();
                data.start_time = "2011-03-22T20:59:50+0000";
                data.duration="3600";
                data.name = "Appcelerator Meetup Group";
                data.place_id="4d7e62d6d0afbe04170000a4";
                sdk.sendRequest("events/create.json", URLRequestMethod.POST, data, false, callback);
                
            SDK Callback:
            
                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "createEvent") {
                      	var events:Array = data.response.events;
                      	...
                      }
                    }
                  }
                }
                
