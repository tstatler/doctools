name: Messages
description: |
    The Messages APIs provides methods for sending private messages between users.

fields:
  - name: id
    description: ID of the sent message.
    type: String

  - name: thread_id
    description: Thread ID of the sent message.
    type: String

  - name: status
    description: |
        Status of the message: in-box messages have status of `read`, `unread`, or
        `replied`.
    type: String

  - name: subject
    description: Message subject.
    type: String

  - name: body
    description: Message body.
    type: String

  - name: created_at
    description: Message creation date.
    type: Date

  - name: updated_at
    description: Message update date.
    type: Date

  - name: to
    description: Message recipients.
    type: Array<Users>

  - name: from
    description: Message sender.
    type: Users

methods:
  - name: create
    summary: Sends a message.
    url: messages/create.json
    http-method: post
    login-required: true
    description: |
        Sends a message with an optional subject to one or more specified users. The thread_id of
        the first outgoing message is its own id. Replies to the first or subsequent messages in
        the thread will all use the id of the first message as their thread_id. The output of this
        API method is the copy of the message saved to the sender's sent mail.

    parameters:
      - name: to_ids
        description: Comma-separated list of one or more IDs of users to send the message to.
        type: String
        required: true

      - name: body
        description: The body of the message
        type: String
        required: true

      - name: subject
        description: Message subject.
        type: String

      - name: custom_fields
        description: User-defined data. See [Custom Objects and Custom Fields](/#!/guide/customfields).
        type: String

      - name: user_id
        type: String
        description: |
            User ID to send message on behalf of.

            The current login user must be the application admin, in order to send a
            message on behalf of another user.

    response-parameters:
      - name: messages
        type: Array<Messages>
        description: A copy of the message as sent.

    examples:
      - platform: titanium
        example: |
            This example creates a new message and checks the response.

                Cloud.Messages.create({
                    to_ids: toSet.ids.join(','),
                    body: 'Hello World',
                    subject: 'Test Message'
                }, function (e) {
                    if (e.success) {
                        var message = e.messages[0];
                        alert('Success:\n' +
                            'id: ' + message.id + '\n' +
                            'subject: ' + message.subject + '\n' +
                            'body: ' + message.body + '\n' +
                            'updated_at: ' + message.updated_at);
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -F "to_ids=4d71445b6f70951043000006,4d7184f06f70951043000012" -F "subject=Sunday Afternoon" -F "body=Howabout going to the Academy of Sciences?" https://api.cloud.appcelerator.com/v1/messages/create.json?key=<YOUR APP APP KEY>

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"createMessage"
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d85418dd0afbe013e000027",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"sent",
                        "subject":"Sunday Afternoon",
                        "body":"Howabout going to the Academy of Sciences?",
                        "created_at":"2011-03-19T23:51:41+0000",
                        "updated_at":"2011-03-19T23:51:41+0000",
                        "from": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "to": [
                          {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                          },
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                NSDictionary *to_ids = [NSArray arrayWithObjects:user1.objectId, user2.objectId, nil];
                [paramDict setObject:to_ids forKey:@"to_ids"];
                [paramDict setObject:@"hi" forKey:@"subject"]; // optional
                [paramDict setObject:@"This is a test message." forKey:@"body"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"messages/create.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                	for (CCMessage *message in messages)
                	{
                		...
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');
                final Activity currentActivity = this;

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("to_ids", "4d71445b6f70951043000006,4d7184f06f70951043000012");
                data.put("body", "new message!");

                try {
                    APSMessages.create(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            // The callback will be run on a background thread
                            // Switch to the main thread before interacting with the UI
                            if (currentActivity != null) {
                                currentActivity.runOnUiThread(new Runnable() {
                                    public void run() {
                                        if (e.getSuccess()) {
                                            new AlertDialog.Builder(currentActivity)
                                            .setTitle("Success!").setMessage("Created!")
                                            .setPositiveButton(android.R.string.ok, null)
                                            .setIcon(android.R.drawable.ic_dialog_info)
                                            .show();
                                        } else {
                                            Log.e("APSMessages", "ERROR: " + e.getMessage());
                                        }
                                    }
                                });
                            }

                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("to_ids", "4d71445b6f70951043000006,4d7184f06f70951043000012");
                data.put("body", "new message!");
                CCResponse response = sdk.sendRequest("messages/create.json", CCRequestMethod.POST, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "createMessage".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }


  - name: delete
    description: |
        Delete the message with the given `id`. The message must be in the current
        user's inbox or sent mail. There is currently no trash folder and deletion is
        permanent.

        Application Admin can delete any Message object.
    url: messages/delete.json
    http-method: delete
    login-required: true
    parameters:
      - name: message_id
        description: ID of the message to delete.
        type: String

      - name: user_id
        description: |
            User to delete the Message object on behalf of. The user needs to be either the sender
            or recipient of the message.

            The current user must be an application admin to delete a Message object on
            behalf of another user.
        type: String

    examples:
      - platform: titanium
        example: |
            This example deletes a message and checks the response.

                Cloud.Messages.remove({
                    message_id: savedMessageId
                }, function (e) {
                    if (e.success) {
                        alert('Removed');
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -X DELETE "https://api.cloud.appcelerator.com/v1/messages/delete.json?key=<YOUR APP APP KEY>&message_id=4d854389d0afbe013e000029"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"deleteMessage"
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:(CCMessage *)message.objectId, @"message_id", nil];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self  httpMethod:@"DELETE" baseUrl:@"messages/delete.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.method isEqualToString:@"deleteMessage"]) {
                		NSLog(@"message deleted!");
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');
                final Activity currentActivity = this;

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("message_id", "4d854389d0afbe013e000029");

                try {
                    APSMessages.remove(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            // The callback will be run on a background thread
                            // Switch to the main thread before interacting with the UI
                            if (currentActivity != null) {
                                currentActivity.runOnUiThread(new Runnable() {
                                    public void run() {
                                        if (e.getSuccess()) {
                                            new AlertDialog.Builder(currentActivity)
                                            .setTitle("Success!").setMessage("Removed!")
                                            .setPositiveButton(android.R.string.ok, null)
                                            .setIcon(android.R.drawable.ic_dialog_info)
                                            .show();
                                        } else {
                                            Log.e("APSMessages", "ERROR: " + e.getMessage());
                                        }
                                    }
                                });
                            }

                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("message_id", "4d854389d0afbe013e000029");
                CCResponse response = sdk.sendRequest("messages/delete.json", CCRequestMethod.DELETE, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "deleteMessage".equals(meta.getMethod())) {
                  System.out.println("message deleted!");
                }

      - platform: javascript
        example: |
            Example JavaScript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  message_id: '4d854389d0afbe013e000029'
                };
                sdk.sendRequest('messages/delete.json', 'DELETE', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'deleteMessage') {
                        alert("message deleted!");
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.message_id="4d854389d0afbe013e000029";
                sdk.sendRequest("messages/delete.json", URLRequestMethod.DELETE, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "deleteMessage") {
                      	Alert.show("message deleted!");
                      }
                    }
                  }
                }


  - name: delete_thread
    summary: Delete All Messages in a Thread
    url: messages/delete/thread.json
    http-method: delete
    login-required: yes
    description:  |
        Delete all messages in a thread with the given `thread_id`. The thread must be
        in the current user's inbox or sent mail. There is currently no trash folder
        and deletion is permanent.

    parameters:
      - name: thread_id
        description: Thread ID of the message thread to delete.
        type: String

    examples:
      - platform: titanium
        example: |
            This example deletes all messages in a thread and checks the response.

                Cloud.Messages.removeThread({
                    thread_id: savedThreadId
                }, function (e) {
                    if (e.success) {
                        alert('Removed');
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -X DELETE "https://api.cloud.appcelerator.com/v1/messages/delete/thread.json?key=<YOUR APP APP KEY>&thread_id=4d854389d0afbe013e000029"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"deleteMessageThread"
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:message.threadId, @"thread_id", nil];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"DELETE" baseUrl:@"messages/delete/thread.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.method isEqualToString:@"deleteMessageThread"]) {
                		NSLog(@"message deleted!");
                	}
                }

      - platform: android
        example: |
            Example Android call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');
                final Activity currentActivity = this;

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("thread_id", "4d854389d0afbe013e000029");

                try {
                    APSMessages.removeThread(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            // The callback will be run on a background thread
                            // Switch to the main thread before interacting with the UI
                            if (currentActivity != null) {
                                currentActivity.runOnUiThread(new Runnable() {
                                    public void run() {
                                        if (e.getSuccess()) {
                                            statusLabel.setText("Thread removed!");
                                        } else {
                                            Log.e("APSMessages", "ERROR: " + e.getMessage());
                                        }
                                    }
                                });
                            }

                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }
            }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("thread_id", "4d854389d0afbe013e000029");
                CCResponse response = sdk.sendRequest("messages/delete.json", CCRequestMethod.DELETE, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "deleteMessageThread".equals(meta.getMethod())) {
                  System.out.println("messages deleted!");
                }

      - platform: javascript
        example: |

            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  thread_id: '4d854389d0afbe013e000029'
                };
                sdk.sendRequest('messages/delete.json', 'DELETE', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'deleteMessageThread') {
                        alert("messages deleted!");
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.thread_id="4d854389d0afbe013e000029";
                sdk.sendRequest("messages/delete.json", URLRequestMethod.DELETE, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "deleteMessageThread") {
                      	Alert.show("messages deleted!");
                      }
                    }
                  }
                }

  - name: reply
    description: |
        Replies to all recipients of the given message `id`. The status of the message
        will be changed to `replied`.
    url: messages/reply.json
    http-method: post
    login-required: true

    parameters:
      - name: message_id
        description: ID of the message to reply to.

      - name: body
        description: Reply message body text.

    response-parameters:
      - name: messages
        description: An array containing a single message, the sent message.
        type: Array<Messages>

    examples:
      - platform: titanium
        example: |
            This example replies to a message and checks the response.

                Cloud.Messages.reply({
                    message_id: savedMessageId,
                    body: 'Welcome'
                }, function (e) {
                    if (e.success) {
                        var message = e.messages[0];
                        alert('Success:\n' +
                            'id: ' + message.id + '\n' +
                            'subject: ' + message.subject + '\n' +
                            'body: ' + message.body + '\n' +
                            'updated_at: ' + message.updated_at);
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -F "body=Academy of sciences sounds great!" -F "message_id=4d85418dd0afbe013e000025" https://api.cloud.appcelerator.com/v1/messages/reply.json?key=<YOUR APP APP KEY>

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"replyMessage"
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d854389d0afbe013e00002a",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"sent",
                        "subject":"Sunday Afternoon",
                        "body":"Academy of Sciences sounds great!",
                        "created_at":"2011-03-20T00:00:09+0000",
                        "updated_at":"2011-03-20T00:00:09+0000",
                        "from": {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                        },
                        "to": [
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          },
                          {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:



                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:message.objectId forKey:@"message_id"];
                [paramDict setObject:@"This is a reply message." forKey:@"body"];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"messages/reply.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];


            SDK Callback:



                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                	for (CCMessage *message in messages)
                	{
                		...
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');
                final Activity currentActivity = this;

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("message_id", "4d85418dd0afbe013e000025");
                data.put("body", "reply message!");

                try {
                    APSMessages.reply(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            // The callback will be run on a background thread
                            // Switch to the main thread before interacting with the UI
                            if (currentActivity != null) {
                                currentActivity.runOnUiThread(new Runnable() {
                                    public void run() {
                                        if (e.getSuccess()) {
                                            new AlertDialog.Builder(currentActivity)
                                            .setTitle("Success!").setMessage("Replied!")
                                            .setPositiveButton(android.R.string.ok, null)
                                            .setIcon(android.R.drawable.ic_dialog_info)
                                            .show();
                                        } else {
                                            Log.e("APSMessages", "ERROR: " + e.getMessage());
                                        }
                                    }
                                });
                            }

                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("message_id", "4d85418dd0afbe013e000025");
                data.put("body", "reply message!");
                CCResponse response = sdk.sendRequest("messages/reply.json", CCRequestMethod.POST, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "replyMessage".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  message_id: '4d85418dd0afbe013e000025',
                  body: 'reply message!'
                };
                sdk.sendRequest('messages/reply.json', 'POST', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'replyMessage') {
                        var messages = data.response.messages;
                      	...
                      }
                    }
                  }
                }

      - platform: javascript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.message_id = "4d85418dd0afbe013e000025";
                data.body = "reply message!";
                sdk.sendRequest("messages/reply.json", URLRequestMethod.POST, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "replyMessage") {
                      	var messages:Array = data.response.messages;
                      	...
                      }
                    }
                  }
                }

  - name: show
    summary: Shows a Message
    description: Shows a message in the user's mailbox.
    url: messages/show.json
    login-required: true

    parameters:
      - name: message_id
        description: ID of the message.
        type: String
        required: true

    response-parameters:
      - name: messages
        description: An array with one message item.
        type: Array<Messages>

    examples:
      - platform: titanium
        example: |
            This example retrieves information about a message and checks the response.

                Cloud.Messages.show({
                    message_id: savedMessageId
                }, function (e) {
                    if (e.success) {
                        var message = e.messages[0];
                        alert('Success:\n' +
                            'id: ' + message.id + '\n' +
                            'subject: ' + message.subject + '\n' +
                            'body: ' + message.body + '\n' +
                            'updated_at: ' + message.updated_at);
                    } else {
                        alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt "https://api.cloud.appcelerator.com/v1/messages/show.json?key=<YOUR API APP KEY>&message_id=<MESSAGE_ID>"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"showMessage",
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d85418dd0afbe013e000025",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"read",
                        "subject":"Sunday Afternoon",
                        "body":"How about going to the Academy of Sciences?",
                        "created_at":"2011-03-19T23:51:41+0000",
                        "updated_at":"2011-03-19T23:54:30+0000",
                        "from": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "to": [
                          {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                          },
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:(CCMessage*)message.objectId, @"message_id", nil];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"messages/show.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                }

      - platform: android
        example: |
            Example Android APS SDK call:
                APSCloud.enable(this, 'APS_CLOUD_KEY');
                final Activity currentActivity = this;

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("message_id", 'MESSAGE_ID');

                try {
                    APSMessages.show(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            // The callback will be run on a background thread
                            // Switch to the main thread before interacting with the UI
                            if (currentActivity != null) {
                                currentActivity.runOnUiThread(new Runnable() {
                                    public void run() {
                                        if (e.getSuccess()) {
                                            try {
                                                  JSONArray messages = responseJSON.getJSONArray("messages");
                                                  // Do stuff with messages...
                                              } catch (JSONException err) {
                                                Log.e("APSMessages", "Exception thrown: " + err.toString());
                                            }
                                        } else {
                                            Log.e("APSMessages", "ERROR: " + e.getMessage());
                                        }

                                    }
                                });
                            }

                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP API KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("message_id", <MESSAGE_ID>);
                CCResponse response = sdk.sendRequest("messages/show.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showMessage".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }

  - name: show_inbox
    summary: Show User's Inbox Messages
    description: |
        Shows messages in the current user's inbox. Messages in the inbox have the
        status of `unread`, `read`, or `replied`.
    url: messages/show/inbox.json `
    login-required: true

    parameters:
      - name: page
        description: Request page number, default is 1.
        type: Number
        optional: true

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number
        optional: true

    response-parameters:
      - name: messages
        description: List of inbox messages.
        type: Array<Messages>

    examples:
      - platform: titanium
        example: |
            This example requests a list of messages in the inbox and checks the response.

                Cloud.Messages.showInbox(function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.messages.length);
                        for (var i = 0; i < e.messages.length; i++) {
                            var message = e.messages[i];
                            alert('Success:\n' +
                                'id: ' + message.id + '\n' +
                                'subject: ' + message.subject + '\n' +
                                'body: ' + message.body + '\n' +
                                'updated_at: ' + message.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/messages/show/inbox.json?key=<YOUR APP APP KEY>

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"showMessagesInbox",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":1
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d85418dd0afbe013e000025",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"read",
                        "subject":"Sunday Afternoon",
                        "body":"Howabout going to the Academy of Sciences?",
                        "created_at":"2011-03-19T23:51:41+0000",
                        "updated_at":"2011-03-19T23:54:30+0000",
                        "from": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "to": [
                          {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                          },
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                // search for current user's checkins
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"messages/show/inbox.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');

                try {
                    APSMessages.showInbox(null, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray messages = e.getResponse().getJSONArray("messages");
                                    if (messages.length() <= 0) {
                                        Log.i("APSMessages", "No Messages");
                                    } else {
                                        for (int i = 0; i < messages.length(); i++) {
                                            JSONObject message = messages.getJSONObject(i);
                                            Log.i("APSMessages", message.getString("subject"));
                                        }
                                    }
                                }
                                catch (JSONException err) {
                                    Log.e("APSMessages", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSMessages", "ERROR: " + e.getMessage());
                            }
                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                CCResponse response = sdk.sendRequest("messages/show/inbox.json", CCRequestMethod.GET, null);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showMessagesInbox".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }

      - platform: javascript
        example: |
            Example JavaScript call:



                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                sdk.sendRequest('messages/show/inbox.json', 'GET', null, callback);


            SDK Callback:



                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'showMessagesInbox') {
                        var messages = data.response.messages;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                sdk.sendRequest("messages/show/inbox.json", URLRequestMethod.GET, null, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "showMessagesInbox") {
                      	var messages:Array = data.response.messages;
                      	...
                      }
                    }
                  }
                }

  - name: show_sent
    summary: Show User's Sent Messages
    description: Shows messages in the current user's sent messages.
    url: messages/show/sent.json
    login-required: true

    parameters:
      - name: page
        description: Request page number, default is 1.
        type: Number
        optional: true
      - name: per_page
        description: Number of results per page, default is 10.
        type: Number
        optional: true

    response-parameters:
      - name: messages
        description: List of sent  messages.
        type: Array<Messages>

    examples:
      - platform: titanium
        example: |
            This example requests a list of messages that have been sent and checks the response.

                Cloud.Messages.showSent(function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.messages.length);
                        for (var i = 0; i < e.messages.length; i++) {
                            var message = e.messages[i];
                            alert('Success:\n' +
                                'id: ' + message.id + '\n' +
                                'subject: ' + message.subject + '\n' +
                                'body: ' + message.body + '\n' +
                                'updated_at: ' + message.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/messages/show/sent.json?key=<YOUR APP APP KEY>

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"showMessagesSent",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":1
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d85418dd0afbe013e000027",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"sent",
                        "subject":"Sunday Afternoon",
                        "body":"Howabout going to the Academy of Sciences?",
                        "created_at":"2011-03-19T23:51:41+0000",
                        "updated_at":"2011-03-19T23:51:41+0000",
                        "from": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "to": [
                          {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                          },
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                // search for current user's checkins
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"messages/show/sent.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                }


      - platform: android
        example: |
            Example Android call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');

                try {
                    APSMessages.showSent(null, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray messages = e.getResponse().getJSONArray("messages");
                                    if (messages.length() <= 0) {
                                        Log.i("APSMessages", "No Messages");
                                    } else {
                                        for (int i = 0; i < messages.length(); i++) {
                                            JSONObject message = messages.getJSONObject(i);
                                            Log.i("APSMessages", message.getString("subject"));
                                        }
                                    }
                                }
                                catch (JSONException err) {
                                    Log.e("APSMessages", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSMessages", "ERROR: " + e.getMessage());
                            }
                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                CCResponse response = sdk.sendRequest("messages/show/sent.json", CCRequestMethod.GET, null);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showMessagesSent".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }

      - platform: javascript
        example: |
            Example JavaScript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                sdk.sendRequest('messages/show/sent.json', 'GET', null, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'showMessagesSent') {
                        var messages = data.response.messages;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                sdk.sendRequest("messages/show/sent.json", URLRequestMethod.GET, null, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "showMessagesSent") {
                      	var messages:Array = data.response.messages;
                      	...
                      }
                    }
                  }
                }

  - name: show_thread
    summary: Show Messages in a Thread
    description: |
        Show messages with the given `thread_id` from the user's inbox. If the status
        of any of the returned messages is `unread`, it will be changed to `read`.
    url: messages/show/thread.json `
    login-required: true

    parameters:
      - name: thread_id
        description: ID of the thread to show messages from.
        type: String

      - name: page
        description: Request page number, default is 1.
        type: Number
        optional: true

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number
        optional: true

    response-parameters:
      - name: messages
        description: List of messages in the thread.
        type: Array<Messages>

    examples:
      - platform: titanium
        example: |
            This example requests a list of messages in a thread and checks the response.

                Cloud.Messages.showThread({
                    thread_id: savedThreadId
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.messages.length);
                        for (var i = 0; i < e.messages.length; i++) {
                            var message = e.messages[i];
                            alert('Success:\n' +
                                'id: ' + message.id + '\n' +
                                'thread id: ' + message.thread_id + '\n' +
                                'subject: ' + message.subject + '\n' +
                                'body: ' + message.body + '\n' +
                                'updated_at: ' + message.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt "https://api.cloud.appcelerator.com/v1/messages/show/thread.json?key=<YOUR APP APP KEY>&thread_id=4d85418dd0afbe013e000025"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"showThreadMessages",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":3
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d869af5d0afbe1074000006",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"unread",
                        "subject":"Sunday Afternoon",
                        "body":"That was a fun Sunday afternoon!",
                        "created_at":"2011-03-21T00:25:25+0000",
                        "updated_at":"2011-03-21T00:25:25+0000",
                        "from": {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                        },
                        "to": [
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          },
                          {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                          }
                        ]
                      },
                      {
                        "id":"4d854389d0afbe013e000028",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"unread",
                        "subject":"Sunday Afternoon",
                        "body":"Academy of Sciences sounds great!",
                        "created_at":"2011-03-20T00:00:09+0000",
                        "updated_at":"2011-03-20T00:00:09+0000",
                        "from": {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                        },
                        "to": [
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          },
                          {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                          }
                        ]
                      },
                      {
                        "id":"4d85418dd0afbe013e000026",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"unread",
                        "subject":"Sunday Afternoon",
                        "body":"Howabout going to the Academy of Sciences?",
                        "created_at":"2011-03-19T23:51:41+0000",
                        "updated_at":"2011-03-19T23:51:41+0000",
                        "from": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "to": [
                          {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                          },
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                // search for current user's checkins
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:message.threadId forKey:@"thread_id"];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"messages/show/thread.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("thread_id", "4d85418dd0afbe013e000025");

                try {
                    APSMessages.showThread(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray messages = e.getResponse().getJSONArray("messages");
                                    if (messages.length() <= 0) {
                                        Log.i("APSMessages", "No Messages");
                                    } else {
                                        for (int i = 0; i < messages.length(); i++) {
                                            JSONObject message = messages.getJSONObject(i);
                                            Log.i("APSMessages", message.getString("subject"));
                                        }
                                    }
                                }
                                catch (JSONException err) {
                                    Log.e("APSMessages", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSMessages", "ERROR: " + e.getMessage());
                            }
                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("thread_id", "4d85418dd0afbe013e000025");
                CCResponse response = sdk.sendRequest("messages/show/thread.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showThreadMessages".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }

      - platform: javascript
        example: |
            Example JavaScript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  thread_id: '4d85418dd0afbe013e000025'
                };
                sdk.sendRequest('messages/show/thread.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'showThreadMessages') {
                        var messages = data.response.messages;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.thread_id = "4d85418dd0afbe013e000025";
                sdk.sendRequest("messages/show/thread.json", URLRequestMethod.GET, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "showThreadMessages") {
                      	var messages:Array = data.response.messages;
                      	...
                      }
                    }
                  }
                }


  - name: show_threads
    summary: Show User's Message Threads
    description: Shows the first message in each of the most recent threads in the user's inbox.
    url: messages/show/threads.json `
    login-required: true

    parameters:
      - name: page
        description: Request page number, default is 1.
        type: Number
        optional: true

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number
        optional: true

    response-parameters:
      - name: messages
        description: |
            List of messages representing the first message in each of the user's
            recent threads.
        type: Array<Messages>

    examples:
      - platform: titanium
        example: |
            This example requests a list of message threads and checks the response.

                Cloud.Messages.showThreads(function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.messages.length);
                        for (var i = 0; i < e.messages.length; i++) {
                            var message = e.messages[i];
                            alert('Success:\n' +
                                'id: ' + message.id + '\n' +
                                'thread id: ' + message.thread_id + '\n' +
                                'subject: ' + message.subject + '\n' +
                                'body: ' + message.body + '\n' +
                                'updated_at: ' + message.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });
      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt https://api.cloud.appcelerator.com/v1/messages/show/threads.json?key=<YOUR APP APP KEY>

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"showThreads",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":2
                  },
                  "response": {
                    "messages": [
                      {
                        "id":"4d869af5d0afbe1074000006",
                        "thread_id":"4d85418dd0afbe013e000025",
                        "status":"unread",
                        "subject":"Sunday Afternoon",
                        "body":"That was a fun Sunday afternoon!",
                        "created_at":"2011-03-21T00:25:25+0000",
                        "updated_at":"2011-03-21T00:25:25+0000",
                        "from": {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                        },
                        "to": [
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          },
                          {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                          }
                        ]
                      },
                      {
                        "id":"4d867eb7d0afbe1074000004",
                        "thread_id":"4d867eb7d0afbe1074000003",
                        "status":"unread",
                        "subject":"Appcelerator Cloud Services Relase Date",
                        "body":"The private beta will be released on March 28",
                        "created_at":"2011-03-20T22:24:55+0000",
                        "updated_at":"2011-03-20T22:24:55+0000",
                        "from": {
                            "id":"4d854129d0afbe013e000022",
                            "first_name":"Wei",
                            "last_name":"Kong",
                            "created_at":"2011-03-19T23:50:01+0000",
                            "updated_at":"2011-03-19T23:50:01+0000"
                        },
                        "to": [
                          {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                          },
                          {
                            "id":"4d85415ad0afbe013e000023",
                            "first_name":"George",
                            "last_name":"Dy",
                            "created_at":"2011-03-19T23:50:50+0000",
                            "updated_at":"2011-03-19T23:50:50+0000"
                          }
                        ]
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                // search for current user's checkins
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:3];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"messages/show/threads.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *messages = [response getObjectsOfType:[CCMessage class]];
                }

      - platform: android
        example: |
            Example Android call:

                APSCloud.enable(this, 'APS_CLOUD_KEY');

                try {
                    APSMessages.showThreads(null, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray messages = e.getResponse().getJSONArray("messages");
                                    if (messages.length() <= 0) {
                                        Log.i("APSMessages", "No Messages");
                                    } else {
                                        for (int i = 0; i < messages.length(); i++) {
                                            JSONObject message = messages.getJSONObject(i);
                                            Log.i("APSMessages", message.getString("subject"));
                                        }
                                    }
                                }
                                catch (JSONException err) {
                                    Log.e("APSMessages", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSMessages", "ERROR: " + e.getMessage());
                            }
                        }
                    });
                } catch (APSClientError e) {
                    Log.e("APSMessages", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                CCResponse response = sdk.sendRequest("messages/show/threads.json", CCRequestMethod.GET, null);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showThreads".equals(meta.getMethod())) {
                  JSONArray messages = responseJSON.getJSONArray("messages");
                  ...
                }

      - platform: javascript
        example: |
            Example JavaScript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                sdk.sendRequest('messages/show/threads.json', 'GET', null, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'showThreads') {
                        var messages = data.response.messages;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                sdk.sendRequest("messages/show/threads.json", URLRequestMethod.GET, null, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "showThreads") {
                      	var messages:Array = data.response.messages;
                      	...
                      }
                    }
                  }
                }

