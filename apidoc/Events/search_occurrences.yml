name: Events
methods:
  - name: search_occurrences
    summary: Seach for Event Occurrences

    description: |
        Full text search of event occurrences.
        
        Optionally, `latitude` and `longitude` can be given to return the list of
        event occurrences starting from a particular location (location is retrieved
        from place if the event is associated with a place). To bound the results
        within a certain radius (in km) from the starting coordinates, add the
        `distance` parameter. `q` can be given to search by event name.
        
    url: events/search/occurrences.json

    parameters:

      - name: page  
        description: Request page number, default is 1.
        type: Number
      
      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: place_id
        description: Restrict search results to events located in the identified {@link Places}.
        type: String

      - name: user_id
        description: Restrict search results to events owned by the identified {@link Users}.
        type: String

      - name: latitude
        description: Latitude of the search starting point.
        type: Number

      - name: longitude
        description: Longitude of the search starting point.
        type: Number

      - name: distance
        description: |
            Maximum distance in km from the starting point identified by
            `longitude`, latitude`.
        type: Number

      - name: start_time
        description: Only return events that start on or after `start_time`.
        type: Date

      - name: end_time
        description: Only return events that end on or before `end_time`.
        type: Date

      - name: q
        description: |
            Space-separated list of keywords, used to perform full text search on event
            name and tags.

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.  
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.  

            Default is 3, valid range is 1 to 8.
        type: Number

    response-parameters:
      - name: events
        description: List of events matching the search results.
        type: Array<Events>

    examples:
      - platform: titanium
        example: |
            This example retrieves a list of event occurrences and checks the response.
    
                Cloud.Events.searchOccurrences({
                    place_id: savedPlaceId,
                    start_time: startTime
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.event_occurrences.length);
                        for (var i = 0; i < e.event_occurrences.length; i++) {
                            var event = e.event_occurrences[i].event;
                            alert('id: ' + event.id + '\n' +
                                  'name: ' + event.name + '\n' +
                                  'start time: ' + event.start_time + '\n' +
                                  'updated_at: ' + place.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });
    
      - platform: rest
        example: |
            Example cURL request:
            
                $ curl -b cookies.txt -c cookies.txt "http://api.cloud.appcelerator.com/v1/events/search/occurrences.json?key=<YOUR APP APP KEY>&place;_id=4d7e62d6d0afbe04170000a4"
                
            Example JSON response:
            
                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"searchEventOccurrences",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":1
                  },
                  "response": {
                    "event_occurrences": [
                      {
                        "start_time": "2011-03-22T20:59:50+0000",
                        "end_time": "2011-03-22T21:59:50+0000",
                        "event": {
                          "id": "4f308b26c3666e22a0000019",
                          "name": "test event 7",
                          "start_time": "2011-03-22T20:59:50+0000",
                          "duration": 3600,
                          "created_at": "2012-02-07T02:23:34+0000",
                          "updated_at": "2012-02-07T02:23:34+0000",
                          "ical": "DTSTART:20110322T205950Z\nDURATION:PT1H\nRRULE:FREQ=DAILY;COUNT=3",
                          "recurring": "daily",
                          "recurring_count": 3,
                          "recurring_until": "2011-03-26T20:59:50+0000",
                          "num_occurrences": 3,
                          "details": "test details",
                          "user": {
                            "id": "4f308b24c3666e22a0000002",
                            "first_name": "Bob",
                            "last_name": "Dude",
                            "created_at": "2012-02-07T02:23:32+0000",
                            "updated_at": "2012-02-07T02:23:34+0000",
                            "external_accounts": [
                
                            ],
                            "username": "bob",
                            "email": "bob@dude.com"
                          },
                          "place": {
                            "id": "4f308b26c3666e22a0000017",
                            "name": "test place",
                            "created_at": "2012-02-07T02:23:34+0000",
                            "updated_at": "2012-02-07T02:23:34+0000",
                            "address": "test address",
                            "city": "test city",
                            "latitude": 37.784732,
                            "longitude": -122.393159
                          }
                        }
                      }
                    ]
                  }	
                }
                
      - platform: ios
        example: |
            Example iOS call:
            
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:2];
                [pramDict setObject:(CCPlace *)place.objectId forKey:@"place_id"];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"events/search/occurrences.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.method isEqualToString:@"searchEventOccurrences"]) {
                		NSArray *occurrences = [response getObjectsOfType:[CCEventOccurrence class]];
                		for (CCEventOccurrence *occurrence in occurrences)
                		{
                			...
                		}
                	}
                }
                
      - platform: android
        example: |
            Example Android call:
            
                Cocoafish sdk = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //Cocoafish sdk = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("place_id", "4d7e62d6d0afbe04170000a4");
                //data.put("user_id", "4d7e62d6d0afbe04170000a4");
                CCResponse response = sdk.sendRequest("events/search/occurrences.json", CCRequestMethod.GET, data);
                
            SDK Callback:
            
                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "searchEventOccurrences".equals(meta.getMethod())) {
                  JSONArray eventOccurrences = responseJSON.getJSONArray("event_occurrences");
                  ...
                }
                
      - platform: javascript
        example: |
            Example Javascript call:
            
                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  place_id: '4d7e62d6d0afbe04170000a4'
                  //user_id: '4d7e62d6d0afbe04170000a4'
                };
                sdk.sendRequest('events/search/occurrences.json', 'GET', data, callback);
                
            SDK Callback:
            
                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'searchEventOccurrences') {
                        var event_occurrences = data.response.event_occurrences;
                      	...
                      }
                    }
                  }
                }
                
      - platform: actionscript
        example: |
            Example Actionscript call:
            
                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                var data:Object = new Object();
                data.place_id="4d7e62d6d0afbe04170000a4";
                //data.user_id="4d7e62d6d0afbe04170000a4";
                sdk.sendRequest("events/search/occurrences.json", URLRequestMethod.GET, data, false, callback);
                
            SDK Callback:
            
                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "searchEventOccurrences") {
                      	var eventOccurrences:Array = data.response.event_occurrences;
                      	...
                      }
                    }
                  }
                }
