name: Events
methods:
  - name: query_occurrences
    summary: Custom Query Event Occurrences
    description: |
        Perform custom query of event occurrences with sorting and paginating.
        
        * You can paginate query results using `skip` and `limit` parameters, or `page` and `per_page`, 
        but not both in the same query.
        * Currently, you can not query or sort data stored inside array or hash in custom
        fields.

        In addition to custom fields, you can query the following fields:

        <table class="doc_content_table">
            <tr>
                <th>Name</th>
            <th>Type</th>
                <th>Summary</th>
            </tr>
          <tr>
            <td><code>name</code></td>
            <td>String</td>
            <td>Event's name</td>
          </tr>
          <tr>
            <td><code>user_id</code></td>
            <td>String</td>
            <td>Event owner's user id</td>
          </tr>
          <tr>
            <td><code>place_id</code></td>
            <td>String</td>
            <td>If an event belongs to a place, the associated place_id</td>
          </tr>
          <tr>
            <td><code>start_time</code></td>
            <td>Time</td>
            <td>Start time of an event occurrence</td>
          </tr>
          <tr>
            <td><code>end_time</code></td>
            <td>Time</td>
            <td>End time of an event occurrence</td>
          </tr>
          <tr>
            <td><code>lnglat</code></td>
            <td>Geo location array - [longitude, latitude]</td>
            <td>If an event belongs to a place, you can use <code>lnglat</code> to query events by place location</td>
          </tr>
        </table>

        For details about using the query parameters,
        see the [Search and Query guide](#!/guide/search_query).

    url: events/query/occurrences.json

    parameters:
      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. The specified value must be greater than 0 and no greater than 1000, or an HTTP 400 (Bad Request) 
            error will be returned.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
            The specified value must not be less than 0 or an HTTP 400 error will be returned.            
        type: Number

      - name: where
        description: |
            Constraint values for fields. `where` should be encoded JSON.

            If `where` is not specified, `query` returns all objects.
        type: Hash

      - name: order
        description: |
            Sort results by one or more fields.
        type: String

      - name: sel
        description: |
            Selects the object fields to display. Do not use this parameter with `unsel`.
        type: Hash

      - name: unsel
        description: |
            Selects the object fields NOT to display. Do not use this parameter with `sel`.
        type: Hash

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.

            Default is 3, valid range is 1 to 8.
        type: Number

      - name: pretty_json
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean        

    examples:
      - platform: titanium
        example: |
            This example retrieves a list of event occurrences and checks the response.

                Cloud.Events.queryOccurrences(function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.event_occurrences.length);
                        for (var i = 0; i < e.event_occurrences.length; i++) {
                            var event = e.event_occurrences[i].event;
                            alert('id: ' + event.id + '\n' +
                                  'name: ' + event.name + '\n' +
                                  'start time: ' + event.start_time + '\n' +
                                  'updated_at: ' + place.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                Example: query event occurrences with name "meetup" near latitude 37.12, longitude -122.23 within 5 miles
                $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode  'where={"name":"meetup","lnglat":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}' "https://api.cloud.appcelerator.com/v1/events/query/occurrences.json?key=<YOUR APP APP KEY>&pretty_json=true"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"queryEventOccurrences",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":1
                  },
                  "response": {
                    "event_occurrences": [
                      {
                        "start_time": "2011-03-22T20:59:50+0000",
                        "end_time": "2011-03-22T21:59:50+0000",
                        "event": {
                          "id": "4e932f74ad44939896000054",
                          "name": "meetup",
                          "start_time": "2011-03-22T20:59:50+0000",
                          "duration": 3600,
                          "created_at": "2012-01-31T04:52:02+0000",
                          "updated_at": "2012-01-31T04:52:02+0000",
                          "ical": "DTSTART:20110322T205950Z\nDURATION:PT1H\nRRULE:FREQ=DAILY;COUNT=3",
                          "recurring": "daily",
                          "recurring_count": 3,
                          "recurring_until": "2011-03-26T20:59:50+0000",
                          "num_occurrences": 3,
                          "details": "food",
                          "user": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                          },
                          "place": {
                            "id":"4d7e62d6d0afbe04170000a4",
                            "name":"Maya Restaurant",
                            "created_at":"2011-03-14T18:47:50+0000",
                            "updated_at":"2011-03-14T18:47:50+0000",
                            "address":"303 2nd Street",
                            "city":"San Francisco",
                            "state":"CA",
                            "country":"United States",
                            "phone":"(415) 543-2928",
                            "latitude":37.784732,
                            "longitude":-122.395441
                          }
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS APS SDK call:

                [APSEvents queryOccurrences:nil withBlock:^(APSResponse *e) {
                      if (e.success) {
                          NSString *message = [NSString stringWithFormat:@"Found %lu event_occurrences", (unsigned long)((NSArray *)e.response[@"event_occurrences"]).count];
                          [[[UIAlertView alloc] initWithTitle:@"Success" message:message delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                      } else {
                          [[[UIAlertView alloc] initWithTitle:@"Error" message:e.errorMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                      }
                }];

      - platform: ios-acssdk
        example: |
            Example iOS call:

                CCWhere *where = [[[CCWhere alloc] init] autorelease];
                [where fieldName:@"lnglat" nearLat:37.12 nearLng:-122.23 maxDistanceMi:5.0];
                [where fieldName:@"name" equalTo:@"meetup"];
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @"where", nil]
                request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"events/query/occurrences.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.methodName isEqualToString:@"queryEventOccurrences"]) {
                		NSArray *eventOccurrences = [response getObjectsOfType:[CCEventOccurrence class]];
                		for (CCEventOccurrence *occurrence in eventOccurrences) {
                			...
                		}
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                HashMap<String, Object> data = new HashMap<String, Object>();
                JSONObject params = new JSONObject("{'name':'meetup','lnglat':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}");
                data.put("where", params);

                try {
                    APSEvents.queryOccurrences(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    Log.i("APSEvents", e.getResponseString());
                                } catch (APSCloudException e1) {
                                       Log.e("APSEvents", e1.toString());
                                }
                            } else {
                                Log.e("APSEvents", e.getMessage());
                            }
                        }

                        @Override
                        public void onException(APSCloudException e) {
                            Log.e("APSEvents", e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSEvents", e.toString());
                }


      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("where", "{'name':'meetup','lnglat':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}");
                CCResponse response = sdk.sendRequest("events/query/occurrences.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "queryEventOccurrences".equals(meta.getMethod())) {
                  JSONArray eventOccurrences = responseJSON.getJSONArray("event_occurrences");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  where: '{"name":"meetup","lnglat":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}'
                };
                sdk.sendRequest('events/query/occurrences.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'queryEventOccurrences') {
                        var eventOccurrences = data.response.event_occurrences;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.where = "{'name':'meetup','lnglat':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}";
                sdk.sendRequest("events/query/occurrences.json", URLRequestMethod.GET, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "queryEventOccurrences") {
                      	var eventOccurrences:Array = data.response.event_occurrences;
                      	...
                      }
                    }
                  }
                }

