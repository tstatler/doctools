name: Events
methods:
  - name: query
    summary: Custom Query Events
    description: |
        Perform custom query of events with sorting and paginating. Currently you can
        not query or sort data stored inside array or hash in custom fields.

        In addition to the custom fields, you can query the following event fields:

        <table>
            <tr>
                <th>Name</th>
            <th>Type</th>
                <th>Summary</th>
            </tr>
          <tr>
            <td><code>name</code></td>
            <td>String</td>
            <td>Event's name</td>
          </tr>
          <tr>
            <td><code>user_id</code></td>
            <td>String</td>
            <td>Event owner's user ID</td>
          </tr>
          <tr>
            <td><code>place_id</code></td>
            <td>String</td>
            <td>If an event belongs to a place, the associated place_id</td>
          </tr>
          <tr>
            <td><code>start_time</code></td>
            <td>Time</td>
            <td>Start time of an event</td>
          </tr>
          <tr>
            <td><code>num_occurences</code></td>
            <td>Integer</td>
            <td>Number of time the event repeats</td>
          </tr>
          <tr>
            <td><code>lnglat</code></td>
            <td>Geo location array - [longitude, latitude]</td>
            <td>If an event belongs to a place, you can use <code>lnglat</code> to query events by place location</td>
          </tr>
          <tr>
            <td><code>created_at</code></td>
            <td>Date</td>
            <td>Timestamp when the event was created</td>
          </tr>
          <tr>
            <td><code>updated_at</code></td>
            <td>Date</td>
            <td>Timestamp when the event was last updated</td>
          </tr>
        </table>

        For details about using the query parameters,
        see the [Search and Query guide](#!/guide/search_query).
    url: events/query.json

    parameters:

      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. `limit` cannot be greater than 1000.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
        type: Number

      - name: where
        description: |
            Constraint values for fields. `where` should be encoded JSON.

            If `where` is not specified, `query` returns all objects.
        type: Hash

      - name: order
        description: |
            Sort results by one or more fields.
        type: String

      - name: sel
        description: |
            Selects the object fields to display. Do not use this parameter with `unsel`.
        type: Hash

      - name: show_user_like
	description: |
	    If set to **true**, each Event in the response includes `"current_user_liked: true"`
	     if the current user has liked the object. If the current user has not liked the object, the
	    `current_user_liked` field is not included in the response.
	type: Boolean

      - name: unsel
        description: |
            Selects the object fields NOT to display. Do not use this parameter with `sel`.
        type: Hash

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.

            Default is 3, valid range is 1 to 8.
        type: Number

    examples:
      - platform: titanium
        example: |
            This example requests a list of events and checks the response.

                Cloud.Events.query(function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.events.length);
                        for (var i = 0; i < e.events.length; i++) {
                            var event = e.events[i];
                            alert('id: ' + event.id + '\n' +
                                  'name: ' + event.name + '\n' +
                                  'start time: ' + event.start_time + '\n' +
                                  'updated_at: ' + place.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                Example: query events with name "meetup" near latitude 37.12, longitude -122.23 within 5 miles
                $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode  'where={"name":"meetup","lnglat":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}' "https://api.cloud.appcelerator.com/v1/events/query.json?key=<YOUR APP APP KEY>"

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"queryEvents",
                    "page":1,
                    "per_page":10,
                    "total_pages":1,
                    "total_results":1
                  },
                  "response": {
                    "events": [
                      {
                        "id":"4d870f8bd0afbe1074000017",
                        "name":"meetup",
                        "start_time":"2011-03-22T04:00:00+0000",
                        "created_at":"2011-03-21T08:42:51+0000",
                        "updated_at":"2011-03-21T08:42:51+0000"
                        "user": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "place": {
                          "id":"4d7e62d6d0afbe04170000a4",
                          "name":"Maya Restaurant",
                          "created_at":"2011-03-14T18:47:50+0000",
                          "updated_at":"2011-03-14T18:47:50+0000",
                          "address":"303 2nd Street",
                          "city":"San Francisco",
                          "state":"CA",
                          "country":"United States",
                          "phone":"(415) 543-2928",
                          "latitude":37.784732,
                          "longitude":-122.395441
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                CCWhere *where = [[[CCWhere alloc] init] autorelease];
                [where fieldName:@"lnglat" nearLat:37.12 nearLng:-122.23 maxDistanceMi:5.0];
                [where fieldName:@"name" equalTo:@"meetup"];
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @"where", nil]
                request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"events/query.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.methodName isEqualToString:@"queryEvents"]) {
                		NSArray *events = [response getObjectsOfType:[CCEvent class]];
                		for (CCEvent *event in events) {
                			...
                		}
                	}
                }

      - platform: android
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("where", "{'name':'meetup','lnglat':{'$nearSphere':[-122.23,37.12], '$maxDistance' : 0.00126}}");
                CCResponse response = sdk.sendRequest("events/query.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "queryEvents".equals(meta.getMethod())) {
                  JSONArray events = responseJSON.getJSONArray("events");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  where: '{"name":"meetup","lnglat":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}'
                };
                sdk.sendRequest('events/query.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'queryEvents') {
                        var events = data.response.events;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.where = '{"name":"meetup","lnglat":{"$nearSphere":[-122.23,37.12], "$maxDistance" : 0.00126}}';
                sdk.sendRequest("events/query.json", URLRequestMethod.GET, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "queryEvents") {
                      	var events:Array = data.response.events;
                      	...
                      }
                    }
                  }
                }

