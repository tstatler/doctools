name: Events
methods:
  - name: update
    summary:
## Events: Update an Event

    description: |
        Update the event with the given `id`. Only the original submitter can update
        the event.

        For the event that is set as a recurring event, once created, there will be
        several "event occurrences" created associating with the event object on
        server side, one "event occurrence" represents a single occurrence of the
        recurring event. An "event occurrence" contains start and end time of the
        event's occurrence which are calulated according to the "recurring" settings
        of the event object.

        Instead of computing actual individual occurrences of a recurring event on the
        client side, you can use event occurrences query API to get a list of
        occurrences associated with a repeating event.

        To get all "event occurrence" of an recurring event object, you can use
        {@link Events#show_occurrences} with the event's `id`.

        All the event occurrences will be recomputed if there is any change to the
        start_time, duration and/or recurring.

        An application admin can update any Event object.

    url: events/update.json
    http-method: PUT
    login-required: true

    parameters:
      - name: event_id
        description: ID of the event to update.
        type: String
        required: true

      - name: name
        description: Updated event name.
        type: String

      - name: start_time
        description: Updated event start time.
        type: Date

      - name: duration
        description: Updated event duration, in seconds.
        type: Number

      - name: recurring
        description: |
            New recurrance schedule. Can take the following values: "daily", "weekly", "monthly", or "yearly".
        type: String

      - name: recurring_count
        description: Updated number of occurrences for the event.
        type: Number

      - name: recurring_until
        description: Updated date of last recurrance.
        type: Date

      - name: details
        description: Updated description of the event.
        type: String

      - name: place_id
        description: ID of the place where this event takes place.
        type: Places

      - name: photo
        description: |
            New photo to assign as the event's primary photo.

            When you use `photo` parameter to attach a new photo, you can use it with
            [custom resize and sync options](/docs/photosizes)

            To remove primary photo, simply set "photo=" or "photo_id=". If the original
            photo was created by using `photo` parameter, the photo will be deleted.
        type: Photos

      - name: photo_id
        description: |
            ID of an existing photo to use as the event's primary photo.

            To remove primary photo, simply set "photo=" or "photo_id=". If the original
            photo was created by using `photo` parameter, the photo will be deleted.
        type: String

      - name: tags
        description: Comma-separated list of tags associated with this event.
        type: String

      - name: custom_fields
        description: User defined fields. See [Custom Data Fields](#!/guide/customfields).
        type: [ String, Hash ]

      - name: acl_name
        description: |
            Name of an {@link ACLs} to associate with this checkin object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: acl_id
        description: |
            ID of an {@link ACLs} to associate with this checkin object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: user_id
        description: |
            User to update the Event object on behalf of. The user must be the creator of the object.

            The current user must be an application admin to update the Event object on
            behalf of another user.
        type: String

    response-parameters:
      - name: events
        description: Single-element array containing the updated event object.
        type: Array<Events>

    examples:
      - platform: titanium
        example: |
            This example updates a event and checks the response.

                Cloud.Events.update({
                    event_id: savedEventId,
                    name: 'Annual Celebration',
                    start_time: starttime,
                    duration: 3600,
                    recurring: 'monthly',
                    recurring_count: 5
                }, function (e) {
                    if (e.success) {
                        var event = e.events[0];
                        alert('Success:\n' +
                            'id: ' + event.id + '\n' +
                            'name: ' + event.name + '\n' +
                            'updated_at: ' + event.updated_at);
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -X PUT -F "event_id=4d870f8bd0afbe1074000017" -F "place_id=4d858ca9d0afbe014f000008" http://api.cloud.appcelerator.com/v1/events/update.json?key=<YOUR APP APP KEY>

            Example JSON response:

                {
                  "meta": {
                    "status":"ok",
                    "code":200,
                    "method_name":"updateEvent"
                  },
                  "response": {
                    "events": [
                      {
                        "id":"4d870f8bd0afbe1074000017",
                        "name":"Appcelerator Cloud Services Meetup Group",
                        "start_time":"2011-03-22T04:00:00+0000",
                        "created_at":"2011-03-21T08:42:51+0000",
                        "updated_at":"2011-03-21T08:57:00+0000"
                        "user": {
                            "id":"4d7e6493d0afbe01d8000001",
                            "first_name":"Michael",
                            "last_name":"Goff",
                            "created_at":"2011-03-14T18:55:15+0000",
                            "updated_at":"2011-03-19T05:05:29+0000"
                        },
                        "end_time":"2011-03-22T06:00:00+0000",
                        "place": {
                          "id":"4d858ca9d0afbe014f000008",
                          "name":"El Farolito Taqueria",
                          "created_at":"2011-03-20T05:12:09+0000",
                          "updated_at":"2011-03-20T05:12:09+0000",
                          "address":"2779 Mission Street",
                          "city":"San Francisco",
                          "state":"CA",
                          "country":"United States",
                          "phone":"(415) 826-4870",
                          "latitude":37.784732,
                          "longitude":-122.395441
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                // The sample code below updates the name and photo associated with the event.
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:(CCEvent *)event.objectId, @"event_id", @"Open House", @"name", nil];
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"events/update.json" paramDict:paramDict];
                [request addPhotoUIImage:(UIImage *)newImage paramDict:nil];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	if ([response.meta.method isEqualToString:@"updateEvent"]) {
                		NSArray *events = [response getObjectsOfType:[CCEvent class]];
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');
                final static Activity currentActivity = this;

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("event_id", "4d870f8bd0afbe1074000017");
                data.put("place_id", "4d7e62d6d0afbe04170000a4");

                try {
                    APSEvents.update(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                new AlertDialog.Builder(currentActivity)
                                .setTitle("Success").setMessage("Updated!")
                                .setPositiveButton(android.R.string.ok, null)
                                .setIcon(android.R.drawable.ic_dialog_info)
                                .show();
                            } else {
                                Log.e("APSEvents", e.getMessage());
                            }
                        }

                        @Override
                        public void onException(APSCloudException e) {
                            Log.e("APSEvents", e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSEvents", e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("event_id", "4d870f8bd0afbe1074000017");
                data.put("place_id", "4d7e62d6d0afbe04170000a4");
                CCResponse response = sdk.sendRequest("events/update.json", CCRequestMethod.PUT, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "updateEvent".equals(meta.getMethod())) {
                  JSONArray events = responseJSON.getJSONArray("events");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  event_id: '4d870f8bd0afbe1074000017',
                  place_id: '4d7e62d6d0afbe04170000a4'
                };
                sdk.sendRequest('events/update.json', 'PUT', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'updateEvent') {
                        var events = data.response.events;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.event_id = "4d870f8bd0afbe1074000017";
                data.place_id="4d7e62d6d0afbe04170000a4";
                sdk.sendRequest("events/update.json", URLRequestMethod.PUT, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "updateEvent") {
                      	var events:Array = data.response.events;
                      	...
                      }
                    }
                  }
                }

