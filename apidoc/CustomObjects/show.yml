name: CustomObjects
methods:
  - name: show
    summary: Show Custom Object(s)
    description: |
        Show a custom object's info.

    url: objects/:classname/show.json

    parameters:

      - name: classname
        description: |
            Type of custom object. Specified as part of the URL path, not in the
            parameters.
        type: String
        required: true

      - name: id
        description: |
            The object ID of the custom object to show.

            You must specify either `id` or `ids`.
        type: String
        required: true

      - name: ids
        description:
            A comma-separated list of object IDs of the custom objects to show.

            You must specify either `id` or `ids`.
        type: String
        required: true

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.

            Default is 3, valid range is 1 to 8.
        type: Number

      - name: pretty_print
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean        

      - name: show_user_like
        description: | 
            If set to **true** the CustomObject in the response will include `"current_user_liked: true"`
            if the current user has liked the object. If the user has not liked the object, the
            `current_user_liked` field is not included in the response.
        type: Boolean

    response-parameters:
      - name: classname
        description: |
            The _classname_ property stores a list of custom objects matching the specified
            ID or IDs, where _classname_ matches the classname used in the URL.
        type: Array<CustomObjects>

    examples:
      - platform: titanium
        example: |
            This example requests information about custom objects and checks the response.

                Cloud.Objects.show({
                    classname: 'cars',
                    ids: [ savedCar1.id, savedCar2.id ]
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.cars.length);
                        for (var i = 0; i < e.cars.length; i++) {
                            var car = e.cars[i];
                            alert('id: ' + cars.id + '\n' +
                                'make: ' + car.make + '\n' +
                                'color: ' + car.color + '\n' +
                                'year: ' + car.year + '\n' +
                                'created_at: ' + car.created_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -X GET --data-urlencode 'ids=4ec42e91d9ca72c507000010,4ec42de1d9ca72c50700000d'  "https://api.cloud.appcelerator.com/v1/objects/car/show.json?key=<YOUR APP APP KEY>&pretty_print=true"

            Example JSON response:

                {
                  "meta": {
                    "code": 200,
                    "status": "ok",
                    "method_name": "showObjects"
                  },
                  "response": {
                    "car": [
                      {
                        "color": "blue",
                        "make": "nissan",
                        "purchased_at": "2011-11-03T00:07:37+0000",
                        "year": 2005,
                        "used": false,
                        "coordinates": [
                          [
                            -122.1,
                            37.1
                          ]
                        ],
                        "id": "4ec42de1d9ca72c50700000d",
                        "created_at": "2011-11-16T21:40:49+0000",
                        "updated_at": "2011-11-16T21:40:49+0000"
                      },
                      {
                        "color": "red",
                        "make": "honda",
                        "purchased_at": "2011-11-09T00:07:37+0000",
                        "year": 2011,
                        "new": false,
                        "coordinates": [
                          [
                            -123.1,
                            38.1
                          ]
                        ],
                        "id": "4ec42e91d9ca72c507000010",
                        "created_at": "2011-11-16T21:43:45+0000",
                        "updated_at": "2011-11-16T21:43:45+0000"
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSDictionary *paramDict = [NSDictionary dictionaryWithObject:car.objectId forKey:@"id", nil];
                CCRequest *request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"objects/car/show.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                  if ([response.meta.methodName isEqualToString:@"showObjects"]) {
                    NSArray *cars = [response.response objectForKey:@"car"];
                    ...
                  }
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');
                final Activity currentActivity = this;

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("ids", "4ec42e91d9ca72c507000010,4ec42de1d9ca72c50700000d");
                data.put("classname", "cars");

                try {
                    APSObjects.show(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    Toast.makeText(currentActivity, e.getResponseString(), Toast.LENGTH_SHORT);
                                } catch (APSCloudException err) {
                                    Log.e("APSObjects", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSObjects", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSObjects", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSObjects", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("ids", "4ec42e91d9ca72c507000010,4ec42de1d9ca72c50700000d");
                CCResponse response = sdk.sendRequest("objects/car/show.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "showObjects".equals(meta.getMethod())) {
                  JSONArray cars = responseJSON.getJSONArray("car");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new ACSClient:('<YOUR APP APP KEY>');  // app key
                var data = {
                  ids: '4ec42e91d9ca72c507000010,4ec42de1d9ca72c50700000d'
                };
                sdk.sendRequest('objects/car/show.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'showObjects') {
                        var cars = data.response.car;
                        ...
                      }
                    }
                  }
                }

