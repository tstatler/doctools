name: Posts
methods:
  - name: update
    summary: Update a Post

    description: |
        Updates the identified post. The original submitter can always update
        a post.

        An application admin can update any Post object.

    url: posts/update.json
    http-method: PUT
    login-required: true

    parameters:

      - name: post_id
        description: ID of the post to update.
        type: String
        required: true

      - name: content
        description: Text content of the post.
        type: String
        required: true

      - name: title
        description: Title of the post.
        type: String

      - name: event_id
        description: ID of the {@link Events} this post belongs to.
        type: String

      - name: photo
        description: |
            New photo to attach as the primary photo for this object.

            When you use the `photo` parameter to attach a new photo, you can use the
            [custom resize and sync options](#!/guide/photosizes).
        type: Photos

      - name: photo_id
        description: |
            ID of an existing photo to attach as the primary photo for this object.
        type: String

      - name: tags
        description:  |
            Comma separated list of tags for this object.
        type: String

      - name: custom_fields
        description: User defined fields. See [Custom Data Fields](#!/guide/customfields).
        type: [ String, Hash ]

      - name: acl_name
        description: |
            Name of an {@link ACLs} to associate with this object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.

            To remove an ACL, set `acl_name` or `acl_id` to an empty string.
        type: String

      - name: acl_id
        description: |
            ID of an {@link ACLs} to associate with this object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.

            To remove an ACL, set `acl_name` or `acl_id` to an empty string.
        type: String

      - name: user_id
        description: |
            User ID to update the Post object on behalf of. The user must be the creator of the object.

            The current login user must be an application admin to update a Post object on
            behalf of another user.
        type: String
        
      - name: pretty_print
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean

    response-parameters:
      - name: posts
        description: Single-element array containing the updated post.
        type: Array<Posts>

    examples:
      - platform: titanium
        example: |
            This example updates a post and checks the response.

                Cloud.Posts.update({
                    post_id: savedPostId,
                    title: 'Lunar Eclipse'
                }, function (e) {
                    if (e.success) {
                        var post = e.posts[0];
                        alert('Success:\n' +
                            'id: ' + post.id + '\n' +
                            'title: ' + post.title + '\n' +
                            'content: ' + post.content + '\n' +
                            'updated_at: ' + post.updated_at);
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt -X PUT -F "post_id=4e33a5b7d9ca7246ba000003" -F "title=Updated Post Title" https://api.cloud.appcelerator.com/v1/posts/update.json?key=<YOUR APP APP KEY>&pretty_print=true

            Example JSON response:

                {
                  "meta": {
                    "status": "ok",
                    "code": 200,
                    "method_name": "updatePost"
                  },
                  "response": {
                    "posts": [
                      {
                        "id": "4e33a5b7d9ca7246ba000003",
                        "title": "Updated Post Title",
                        "created_at": "2011-07-30T06:33:27+0000",
                        "updated_at": "2011-07-30T06:33:27+0000",
                        "content": "Updated Post Body",
                        "reviews_count": 10,
                        "ratings_average": 7.5,
                        "ratings_summary": {
                			"10": 5,
                			"5" : 5
                        },
                        "user": {
                          "id": "4e33a5b6d9ca7246ba000002",
                          "first_name": "Bob",
                          "last_name": "Dude",
                          "created_at": "2011-07-30T06:33:26+0000",
                          "updated_at": "2011-07-30T06:33:27+0000",
                          "username": "bob",
                          "email": "bob@dude.com"
                        },
                        "photo": {
                          "id": "4e33a5b7d9ca7246ba000004",
                          "filename": "photo.jpg",
                          "size": 584344,
                          "md5": "589b8ad43ed20bf8e622d719642bc939",
                          "created_at": "2011-07-30T06:33:27+0000",
                          "updated_at": "2011-07-30T06:33:27+0000",
                          "processed": false
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:(CCPost *)post.objectId, @"post_id", @"Updated Post Title", @"title", nil]
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self baseUrl:@"events/update.json" httpMethod:@"GET" paramDict:paramDict];
                [request addPhotoUIImage:(UIImage *)newImage paramDict:nil];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *posts = [response getObjectsOfType:[CCPost class]];
                }

      - platform: android
        example: |
            Example Android call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("post_id", "4e33a5b7d9ca7246ba000003");
                data.put("title", "Updated Post Title");

                try {
                    APSPosts.update(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONObject post = e.getResponse().getJSONArray("posts").getJSONObject(0);
                                    Log.i("APSPosts", posts.getString("title") + " " + posts.getString("content"));
                                } catch (JSONException err) {
                                    Log.e("APSPosts", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSPosts", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSPosts", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSPosts", "ERROR: " + err.getMessage());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("post_id", "4e33a5b7d9ca7246ba000003");
                data.put("title", "Updated Post Title");
                CCResponse response = sdk.sendRequest("posts/update.json", CCRequestMethod.PUT, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "updatePost".equals(meta.getMethod())) {
                  JSONArray posts = responseJSON.getJSONArray("posts");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  post_id: '4e33a5b7d9ca7246ba000003',
                  title: 'Updated Post Title'
                };
                sdk.sendRequest('posts/update.json', 'PUT', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'updatePost') {
                        var posts = data.response.posts;
                      	...
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.post_id = "4e33a5b7d9ca7246ba000003";
                data.title = "Updated Post Title";
                sdk.sendRequest("posts/update.json", URLRequestMethod.PUT, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "updatePost") {
                      	var posts:Array = data.response.posts;
                      	...
                      }
                    }
                  }
                }

