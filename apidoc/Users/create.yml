name: Users
methods:
  - name: create
    summary: Creates a user.
    url: users/create.json
    http-method: post 
    login-required: false
    description: |
        Creates a new user.
        
        When creating a user, you must specify either:

        *   username
        *   email address, first name, and last name

        A user can have both an email address and username specified. However, if username
        is omitted, email address, first name and last name are required.

        For regular users (non-admin users), after successully executing this command, you will be logged
        in as the new user and the session ID will be associated with the newly created user.  For
        example, when user A creates user B, user A is now logged in as user B and user A's session
        ID belongs to user B.

        For admin users, you will still be logged in as the admin user.
    parameters: 

      - name: email
        description: User's email address. Required if `username` is not specified.
        type: String

      - name: username
        description: |
            User's login name. Required if `email` is not specified.

            If `username` is not specified, `email`, `first_name`, and `last_name` must be included.
        type: String

      - name: password  
        description: User's password.
        type: String
        required: true

      - name: password_confirmation 
        description: Copy of user's password for confirmation.
        type: String
        required: true

      - name: first_name  
        description: User's first name. Required when `username` is not provided.
        type: String

      - name: last_name  
        description: User's last name. Required when `username` is not provided.
        type: String

      - name: photo 
        description: |
            New photo to attach as the primary photo for the user.
    
            When you use the `photo` parameter to attach a new photo, you can use the 
            [custom resize and sync options](#!/guide/photosizes).
        type: Photos
      
      - name: photo_id
        description: |
            ID of an existing photo to attach as the primary photo for the user.
        type: String

      - name: tags
        description:  |
            Comma separated list of tags for this user.
        type: String

      - name: custom_fields
        description: User defined fields. See [Custom Data Fields](#!/guide/customfields).
        type: [ String, Hash ]

      - name: acl_name
        description: |
            Name of an {@link ACLs} to associate with this object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: acl_id
        description: |
            ID of an {@link ACLs} to associate with this object.

            An ACL can be specified using `acl_name` or `acl_id`. The two parameters are
            mutually exclusive.
        type: String

      - name: role    
        description: String representation of user role, for example, "teacher".
        type: String

      - name: template    
        description: |
            Send a congratulation email to notify that the user has been created successfully.

            You need to create an email template and pass the template name.
        type: String

      - name: confirmation_template   
        description: |
            If "New User Email Verification" is enabled for the application, ACS sends a confirmation email to 
            the user.

            If you don't pass the `confirmation_template` parameter, then ACS sends a default
            confirmation email.

            If you wish to use your custom email body, you can create a email template and pass
            the template name. Your email template must contain the following URL to allow users
            to be redirected to Appcelerator Cloud Services email verification page:
        
                 https://cloud.appcelerator.com/users/confirmation?key={{key}}&confirmation_token={{confirmation_token}}

            If you have your own website that talks to Appcelerator Cloud Services backend and
            wish to use custom URL, you must provide a URL with the following format:
        
                 https://<your_url.com>/<your_method>?key={{key}}&confirmation_token={{confirmation_token}}
        
            When a user visits the above URL, you make a call to Appcelerator Cloud Services to
            confirm the user internally from your web server:
        
                 GET https://api.cloud.appcelerator.com/v1/users/confirm_user.json?confirmation_token={{confirmation_token}}&key=<Your App Key>
        type: String

    response-parameters:
      - name: users
        description: Single-element array containing user record for the new user.
        type: Array<Users>

    examples:
      - platform: titanium
        example: |
            This example creates a new user and checks the response.
            
                Cloud.Users.create({
                    email: 'test@mycompany.com',
                    first_name: 'test_firstname',
                    last_name: 'test_lastname',
                    password: 'test_password',
                    password_confirmation: 'test_password'
                }, function (e) {
                    if (e.success) {
                        var user = e.users[0];
                        alert('Success:\n' +
                            'id: ' + user.id + '\n' +
                            'sessionId: ' + Cloud.sessionId + '\n' +
                            'first name: ' + user.first_name + '\n' +
                            'last name: ' + user.last_name);
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });
      
      - platform: rest
        example: |
            Example cURL request:
            
                $ curl -b cookies.txt -c cookies.txt -X POST --data-urlencode "email=john.smith@company.com" --data-urlencode "role=teacher" --data-urlencode "first_name=John" --data-urlencode "last_name=Smith" --data-urlencode "password=pass" --data-urlencode "password_confirmation=pass" --data-urlencode 'custom_fields={"age":28, "favorite_color":"blue"}' "https://api.cloud.appcelerator.com/v1/users/create.json?key=<YOUR APP APP KEY>"
                
            Example JSON response:
            
                {
                  "meta": {
                    "stat":"ok",
                    "code":200,
                    "method":"createUser",
                    "session_id": "abcDe0fGHijklenmU6xrdR9123-0"
                  },
                  "response": {
                    "users": [
                      {
                        "id":"4d6e77386f70950c89000001",
                        "first_name":"John",
                        "last_name":"Smith",
                        "role": "teacher",
                        "created_at":"2011-03-02T16:58:32+0000",
                        "updated_at":"2011-03-02T16:58:32+0000",
                        "facebook_authorized":false,
                        "email":"john.smith@company.com",
                        "photo": {
                          "id":"4d882896d0afbe0a3600000d",
                          "filename":"photo.jpg",
                          "size":584344,
                          "md5":"589b8ad43ed20bf8e622d719642bc939",
                          "created_at":"2011-03-22T04:41:58+0000",
                          "updated_at":"2011-03-22T04:42:07+0000",
                          "processed":false
                        },
                        "custom_fields": {
                          "age":28,
                          "favorite_color":"blue"
                        }
                      }
                    ]
                  }	
                }
                
            The User object is defined in `Cocoafish/Models/CCUser.h` The Appcelerator
            Cloud Services SDK automatically stores a logged in userâ€™s session in memory
            and on disk. So once a user is logged in, you can access the current user info
            anytime by calling:
            
                [[Cocoafish defaultCocoafish] getCurrentUser]
            
            It will work after the app is restarted since the session is persisted on disk
            as well.
            
      - platform: ios
        example: |
            Example iOS call:
            
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:@"foo@foo.com" forKey:@"email"];   
                [paramDict setObject:@"John" forKey:@"first_name"];   
                [paramDict setObject:@"Woo" forKey:@"last_name"];   
                [paramDict setObject:@"pass" forKey:@"password"];   
                [paramDict setObject:@"pass" forKey:@"password_confirmation"];   
                CCRequest *request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"POST" baseUrl:@"users/create.json" paramDict:paramDict] autorelease];
                [request addPhotoUIImage:[UIImage imageNamed:@"john.jpg"] paramDict:nil];
                [request startAsynchronous];
                
            SDK Callback:
            
                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *users = [response getObjectsOfType:[CCUser class]];
                	if ([users count] == 1) {
                		NSLog(@"Successfully registered user %@", user);
                	}
                }
                
      - platform: android
        example: |
            Example Android call:
            
                Cocoafish sdk = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //Cocoafish sdk = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                
                //the user's parameters
                Map<String, Object> data = new HashMap<String, Object>();
                data.put("email", "test@appcelerator.com");
                data.put("first_name", "test_firstname");
                data.put("last_name", "test_lastname");
                data.put("password", "test_password");
                data.put("password_confirmation", "test_password");
                File file = new File("/photos/profile.gif");
                data.put("photo", file);
                CCResponse response = sdk.sendRequest("users/create.json", CCRequestMethod.POST, data);
                
            SDK Callback:
            
                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus()) 
                    && meta.getCode() == 200 
                    && "createUser".equals(meta.getMethod())) {
                  JSONArray users = responseJSON.getJSONArray("users");
                  JSONObject user = users.getJSONObject(0);
                  
                  StringBuffer sb = new StringBuffer();
                  sb.append("Create user successful!\n");
                  sb.append("id:" + user.getString("id") + "\n");
                  sb.append("first name:" + user.getString("first_name") + "\n");
                  sb.append("last name:" + user.getString("last_name") + "\n");
                  sb.append("email:" + user.getString("email") + "\n");
                  System.out.println(sb.toString());
                }
                
      - platform: javascript
        example: |
            Example Javascript call:
            
                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  email: 'test@appcelerator.com', 
                  first_name: 'test_firstname', 
                  last_name: 'test_lastname', 
                  password: 'test_password', 
                  password_confirmation: 'test_password',
                  photo: 'testPhoto'
                };
                sdk.sendRequest('users/create.json', 'POST', data, callback);
                
            SDK Callback:
            
                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'createUser') {
                        var message = '';
                        var user = data.response.users[0];
                        message += 'Create user successful!\n';
                        message += 'id:' + user.id + '\n';
                        message += 'first name:' + user.first_name + '\n';
                        message += 'last name:' + user.last_name + '\n';
                        message += 'email:' + user.email + '\n';
                        alert(message);
                      }
                    }
                  }
                }
                
      - platform: actionscript
        example: |
            Example Actionscript call:
            
                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret
                //the user's parameters
                var data:Object = new Object();
                data.email = "test@appcelerator.com";
                data.first_name = "test_firstname";
                data.last_name = "test_lastname";
                data.password = "test_password";
                data.password_confirmation = "test_password";
                data.photo = photo;
                sdk.sendRequest("users/create.json", URLRequestMethod.POST, data, false, callback);
                
            SDK Callback:
            
                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "createUser") {
                        var message:String = "";
                        var user:Object = data.response.users[0];
                        message += "Create user successful!\n";
                        message += "id:" + user.id + "\n";
                        message += "first name:" + user.first_name + "\n";
                        message += "last name:" + user.last_name + "\n";
                        message += "email:" + user.email + "\n";
                        Alert.show(message);
                      }
                    }
                  }
                }
