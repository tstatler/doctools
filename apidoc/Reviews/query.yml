name: Reviews
methods:
  - name: query
    summary: Custom Query Reviews/Comments/Ratings/Likes
    description: |
        Perform custom query of reviews with sorting and paginating. Currently you can
        not query or sort data stored inside array or hash in custom fields.

        The query must be limited to reviews of a given object (by specifying one of `post_id`,
        `photo_id`, etc.) or limited to reviews generated by a given user (by specifying
        `owner_id`.

        In addition to custom fields, the following pre-defined fields can be used to
        query and sort reviews:

        *   `user_id` : `String`. Review owner's user ID.

        *   `rating` : `Integer`. Rating assigned to this review.

        *   `tags_array` : `String`. Tags associated with the review.

        *   `created_at` : `Date`. Timestamp when the review was created.

        *   `updated_at` : `Date`. Timestamp when the review was last updated.

        For details about using the query parameters,
        see the [Search and Query guide](#!/guide/search_query).
    url: reviews/query.json
    parameters:

      - name: post_id
        description: Limit query to reviews on the identified Post object.
        type: String

      - name: photo_id
        description: Limit query to reviews on the identified Photo object.
        type: String

      - name: user_id
        description: Limit query to reviews on the identified User object.
        type: String

      - name: event_id
        description: Limit query to reviews on the identified Event object.
        type: String

      - name: place_id
        description: Limit query to reviews on the identified Place object.
        type: String

      - name: checkin_id
        description: Limit query to reviews on the identified Checkin object.
        type: String

      - name: review_id
        description: Limit query to reviews on the identified Review object.
        type: String

      - name: custom_object_id
        description: Limit query to reviews on the identified Custom object.
        type: String

      - name: owner_id
        description: Limit query results to reviews submitted by the identified  user.

      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. `limit` cannot be greater than 1000.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
        type: Number

      - name: where
        description: |
            Constraint values for fields. `where` should be encoded JSON.

            If `where` is not specified, `query` returns all objects.
        type: Hash

      - name: order
        description: |
            Sort results by one or more fields.
        type: String

      - name: sel
        description: |
            Selects the object fields to display. Do not use this parameter with `unsel`.
        type: Hash

      - name: show_user_like
        description: |
            If set to **true**, each Review object in the response includes `"current_user_liked: true"`
             if the current user has liked the object. If the user has not liked the object, the 
            `current_user_liked` field is not included in the response.
        type: Boolean    

      - name: unsel
        description: |
            Selects the object fields NOT to display. Do not use this parameter with `sel`.
        type: Hash

      - name: response_json_depth
        description: |
            Nested object depth level counts in the response JSON.

            In order to reduce server API calls from an applicaton, the response JSON may
            include not just the objects that are being queried/searched, but also
            some important data related to the returned objects, such as owners and
            referenced objects.

            Default is 3, valid range is 1 to 8.
        type: Number
        
      - name: pretty_json
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean

    response-parameters:
      - name: reviews
        description: List of reviews matching the query parameters.
        type: Array<Reviews>

    examples:
      - platform: titanium
        example: |
            This example requests a list of reviews and checks the response.

                Cloud.Reviews.query({
                    page: 1,
                    per_page: 20,
                    where: {
                        rating: { '$gt': 5.0 }
                    }
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.reviews.length);
                        for (var i = 0; i < e.reviews.length; i++) {
                            var review = e.reviews[i];
                            alert('id: ' + review.id + '\n' +
                                'rating: ' + review.rating + '\n' +
                                'content: ' + review.content + '\n' +
                                'updated_at: ' + review.updated_at);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Queries for reviews with a rating greater than 7.

                $ curl -c cookies.txt -b cookies.txt -X GET --data-urlencode 'where={"rating":{"$gt":7.0}}' "https://api.cloud.appcelerator.com/v1/reviews/query.json?key=<YOUR APP APP KEY>&pretty_json=true"

                {
                  "meta": {
                    "status": "ok",
                    "code": 200,
                    "method_name": "queryReview"
                  },
                  "response": {
                    "reviews": [
                      {
                        "id": "4e33a9f5d9ca724769000006",
                        "rating": 8,
                        "content": "Good",
                        "created_at": "2011-07-30T06:51:33+0000",
                        "updated_at": "2011-07-30T06:51:33+0000",
                        "user": {
                          "id": "4e33a9f4d9ca724769000002",
                          "first_name": "Bob",
                          "last_name": "Dude",
                          "created_at": "2011-07-30T06:51:32+0000",
                          "updated_at": "2011-07-30T06:51:33+0000",
                          "email": "bob@dude.com"
                          "external_accounts": [

                          ],
                          "confirmed_at": "2011-07-30T06:51:33+0000",
                          "username": "bob",
                          "role": "",
                          "admin": "true",
                          "stats": {
                            "photos": {
                              "total_count": 0
                            },
                            "storage": {
                              "used": 0
                            }
                          },
                          "reviews_count": 0,
                          "ratings_count": 0,
                          "ratings_average": 0,
                          "ratings_summary": {
                          }
                        },
                        "custom_fields": {
                        }
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                NSDictionary *data = @{
                                         @"page" : @1,
                                         @"per_page" : @20,
                                         @"where" : @{
                                            @"$gt" : @5.0
                                         }
                                      };
                [APSReviews query:data withBlock:^(APSResponse *e) {
                    if (e.success){
                        NSArray *reviews = e.response[@"reviews"];
                        for (NSDictionary *review in reviews) {
                          NSString *message =[NSString stringWithFormat:@"id : %@\n rating : %@\n content : %@\nUpdated at : %@\n",
                                                  review[@"id"],
                                                  review[@"rating"],
                                                  review[@"content"],
                                                  review[@"updated_at"]];

                          [[[UIAlertView alloc] initWithTitle:@"Success" 
                                                      message:message
                                                     delegate:nil 
                                            cancelButtonTitle:@"OK" 
                                            otherButtonTitles:nil] show];
                        }
                    } else {
                        [[[UIAlertView alloc] initWithTitle:@"Error"
                                                    message:e.errorMessage
                                                   delegate:nil
                                          cancelButtonTitle:@"OK"
                                          otherButtonTitles:nil] show];
                    }
                }];

      - platform: ios-acssdk
        example: |
            Example iOS call:

                CCWhere *where = [[[CCWhere alloc] init] autorelease];
                [where fieldName:@"coordinates" nearLat:37.12 nearLng:-122.23 maxDistanceMi:5.0];
                [where fieldName:@"rating" greaterThan:[NSNumber numberWithInt:7]];
                NSDictionary *paramDict = [NSDictionary dictionaryWithObjectsAndKeys:where, @"where", nil]
                request = [[[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"reviews/query.json" paramDict:paramDict] autorelease];
                [request startAsynchronous];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                  if ([response.meta.methodName isEqualToString:@"queryReviews"]) {
                    NSArray *reviews = [response getObjectsOfType:[CCReview class]];
                    for (CCReview *review in reviews) {
                      ...
                    }
                  }
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                try {
                    HashMap<String, Object> data = new HashMap<String, Object>();
                    JSONObject params = new JSONObject("{'rating': {'$gt': 7.0}}");
                    data.put("where", params);

                    APSReviews.query(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray reviews = e.getResponse().getJSONArray("reviews");
                                    if (reviews.length() <= 0) {
                                        Log.i("APSReviews", "No Results!");
                                    } else {
                                        for (int i = 0; i < reviews.length(); i++) {
                                            JSONObject review = reviews.getJSONObject(i);
                                            Log.i("APSReviews", review.getString("rating") + ":" + review.getString("content"));
                                        }
                                    }
                                } catch (JSONException err) {
                                    Log.e("APSReviews", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSReviews", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSReviews", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSReviews", "Exception thrown: " + e.toString());
                } catch (JSONException e) {
                    Log.e("APSReviews", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("where", "{'rating': {'$gt': 7.0}, 'coordinates': {'$nearSphere': [-122.23,37.12], '$maxDistance': 0.00126}}");
                CCResponse response = sdk.sendRequest("reviews/query.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "queryReviews".equals(meta.getMethod())) {
                  JSONArray reviews = responseJSON.getJSONArray("reviews");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  post_id: '4e33a817d9ca724745000003',
                  review_id: '4e33a9f5d9ca724769000006',
                  rating: '1',
                  content: 'Good'
                };
                sdk.sendRequest('reviews/query.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'queryReviews') {
                        var reviews = data.response.reviews;
                        ...
                      }
                    }
                  }
                }

