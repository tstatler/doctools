name: Friends
methods:
  - name: search
    summary: Search Friends
    description: |
        Search for friends of the current user or a specified user. Specifying the optional `q` parameter
        allows searching by first name, last name, email address, or username. Without
        the `q` parameter, all friends of the specified user are returned.

    url: friends/search.json
    login-required: true

    parameters:

      - name: user_id
        description: |
            ID of the user to search for friends. If friendship is set to one way,
            by default it searches against users that the identified user is **following**. You can
            pass followers=true to search the user's followers.

      - name: followers
        description: |
            If you have friends set to one way, pass followers=true to query user_id's
            followers'

      - name: q
        description: |
            Space-separated list of keywords used to perform full text search on first name, last name,
            email address, username and tags.

      - name: page
        description: Request page number, default is 1.
        type: Number

      - name: per_page
        description: Number of results per page, default is 10.
        type: Number

      - name: limit
        description: |
            Instead of using `page` and `per_page` for pagination, you can use `limit` and
            `skip` to do your own pagination. `limit` is the maximum number of records to
            fetch. `limit` cannot be greater than 1000.
        type: Number

      - name: skip
        description: |
            Number of records to skip. Must be used together with `limit`.
        type: Number

      - name: response_json_depth
        description: |
            Nested object depth level counts in response json.
            In order to reduce server API calls from an applicaton, the response json may
            include not just the objects that are being queried/searched, but also with
            some important data related to the returning objects such as object's owner or
            referencing objects.

            Default is 3, valid range is 1 to 8.
        type: Number

      - name: pretty_print
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean        

    response-parameters:
      - name: users
        description: List of users matching the search criteria.
        type: Array<Users>

    examples:
      - platform: titanium
        example: |
            This example requests information about particular friends and checks the response.

                Cloud.Friends.search({
                    user_id: searchID
                }, function (e) {
                    if (e.success) {
                        alert('Success:\n' +
                            'Count: ' + e.users.length);
                        for (var i = 0; i < e.users.length; i++) {
                            var user = e.users[i];
                            alert('id: ' + user.id + '\n' +
                                'first name: ' + user.first_name + '\n' +
                                'last name: ' + user.last_name);
                        }
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });

      - platform: rest
        example: |
            Example cURL request:

                $ curl -b cookies.txt -c cookies.txt "https://api.cloud.appcelerator.com/v1/friends/search.json?user_id=4e02e022d0afbe41ef000002&q=alice%40gal.com&key=<YOUR APP APP KEY>&pretty_print=true"

            Example JSON response:

                {
                  "meta": {
                    "total_pages": 1,
                    "code": 200,
                    "method_name": "searchFriends",
                    "page": 1,
                    "total_results": 1,
                    "per_page": 10,
                    "status": "ok"
                  },
                  "response": {
                    "users": [
                      {
                        "created_at": "2011-06-23T06:41:43+0000",
                        "updated_at": "2011-06-23T06:41:48+0000",
                        "username": "alice",
                        "id": "4e02e027d0afbe41ef000003",
                        "last_name": "Gal",
                        "email": "alice@gal.com",
                        "first_name": "Alice"
                      }
                    ]
                  }
                }

      - platform: ios
        example: |
            Example iOS call:

                CCUser *current_user = [[ACSClient defaultACSClient] getCurrentUser];
                NSMutableDictionary *paramDict = [NSMutableDictionary dictionaryWithCapacity:1];
                [paramDict setObject:current_user.objectId forKey:@"user_id"];
                [paramDict setObject:[NSNumber nubmerWithInt:1] forKey:@"page"]; // optional, request the first page
                [paramDict setObject:[NSNumber nubmerWithInt:10] forKey:@"per_page"]; // optional
                CCRequest *request = [[CCRequest alloc] initWithDelegate:self httpMethod:@"GET" baseUrl:@"friends/search.json" paramDict:paramDict];
                [request startAsynchronous];
                [request release];

            SDK Callback:

                -(void)ccrequest:(CCRequest *)request didSucceed:(CCResponse *)response
                {
                	NSArray *friendRequests = [response getObjectsOfType:[CCFriendRequest class]];
                	for (CCFriendRequest *request in friendRequests)
                	{
                		...
                	}
                }

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("user_id", "4d6e77386f70950c89000001");

                try {
                    APSFriends.search(data, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                try {
                                    JSONArray users = e.getResponse().getJSONArray("users");
                                    for (int i = 0; i < users.length(); i++) {
                                        JSONObject user = users.getJSONObject(i);
                                        Log.i("APSFriends", user.getString("first_name") + " " + user.getString("last_name"));
                                    }
                                } catch (JSONException err) {
                                    Log.e("APSFriends", "Exception thrown: " + err.toString());
                                }
                            } else {
                                Log.e("APSFriends", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(APSCloudException e) {
                            Log.e("APSFriends", "Exception thrown: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSFriends", "Exception thrown: " + e.toString());
                }

      - platform: android-acssdk
        example: |
            Example Android call:

                ACSClient sdk = new ACSClient("<YOUR APP APP KEY>"); // app key
                //ACSClient sdk = new ACSClient("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                Map<String, Object> data = new HashMap<String, Object>();
                data.put("user_id", "4d6e77386f70950c89000001");
                CCResponse response = sdk.sendRequest("friends/search.json", CCRequestMethod.GET, data);

            SDK Callback:

                JSONObject responseJSON = response.getResponseData();
                CCMeta meta = response.getMeta();
                if("ok".equals(meta.getStatus())
                    && meta.getCode() == 200
                    && "searchFriends".equals(meta.getMethod())) {
                  JSONArray users = responseJSON.getJSONArray("users");
                  ...
                }

      - platform: javascript
        example: |
            Example Javascript call:

                var sdk = new Cocoafish('<YOUR APP APP KEY>');  // app key
                var data = {
                  user_id: '4d6e77386f70950c89000001'
                };
                sdk.sendRequest('friends/search.json', 'GET', data, callback);

            SDK Callback:

                function callback(data) {
                  if(data) {
                    if(data.meta) {
                      var meta = data.meta;
                      if(meta.status == 'ok' && meta.code == 200 && meta.method_name == 'searchFriends') {
                        var users = data.response.users;
                        for (var i=0;i<requests.length;i++) {
                          alert("User:" + users[i]);
                        }
                      }
                    }
                  }
                }

      - platform: actionscript
        example: |
            Example Actionscript call:

                var sdk:Cocoafish = new Cocoafish("<YOUR APP APP KEY>"); // app key
                //var sdk:Cocoafish = new Cocoafish("<OAuth Key>", "<OAuth Secret>"); // OAuth key & secret

                var data:Object = new Object();
                data.user_id = "4d6e77386f70950c89000001";
                sdk.sendRequest("friends/search.json", URLRequestMethod.GET, data, false, callback);

            SDK Callback:

                function callback(data:Object):void {
                  if(data) {
                    if(data.hasOwnProperty("meta")) {
                      var meta:Object = data.meta;
                      if(meta.status == "ok" && meta.code == 200 && meta.method_name == "searchFriends") {
                        var users:Array = data.response.users;
                        for (var i:int=0;i<requests.length;i++) {
                          trace("User:" + users[i]);
                        }
                      }
                    }
                  }
                }

