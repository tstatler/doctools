name: GeoFences
methods:
  - name: delete
    summary: Deletes a Geofence
    description: |
        Deletes an existing geo-fence object.

        Available only for Enterprise administrators. 
    url: geo_fences/delete.json
    http-method: DELETE
    login-required: true
    admin-required: true

    parameters: 

      - name: id
        description: ID of the geo-fence object to delete.
        type: String
        required: true

      - name: pretty_json
        description: | 
            Determines if the JSON response is formatted for readability (`true`), or displayed on a
            single line (`false`). Default is `false`.
        type: Boolean
        
    examples:
      - platform: titanium
        example: |
            Requires Titanium SDK 3.2.1 or later.

                Cloud.GeoFences.remove({
                    id: geoFenceId
                }, function (e) {
                    if (e.success) {
                        Ti.API.info(JSON.stringify(e));
                    } else {
                        alert('Error:\n' +
                            ((e.error && e.message) || JSON.stringify(e)));
                    }
                });
    
      - platform: rest
        example: |
            Example cURL request:

                $ curl  -b cookies.txt -c cookies.txt -X DELETE -F 'id=52aa2da0d7de142e0e000040' "http://api.cloud.appcelerator.com/v1/geo_fences/delete.json?key=<API_KEY>"

            Example cURL response:

                {
                  "meta": {
                    "code": 200,
                    "status": "ok",
                    "method_name": "destroyGeoFence"
                  }
                }

      - platform: ios
        example: |
            Example iOS APS SDK call:

                // Create dictionary of parameters to be passed with the request
                NSDictionary *data = @{
                    @"id": geoFenceId
                };
                
                [APSGeoFences remove:data withBlock:^(APSResponse *e) {
                      if (e.success) {
                          [[[UIAlertView alloc] initWithTitle:@"Great" message:@"Success!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                      } else {
                          [[[UIAlertView alloc] initWithTitle:@"Error" message:e.errorMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
                      }
                }];

      - platform: android
        example: |
            Example Android APS SDK call:

                APSServiceManager.getInstance().enable(getApplicationContext(), 'APS_APP_KEY');
                final Activity currentActivity = this;

                HashMap<String, Object> data = new HashMap<String, Object>();
                data.put("id", "52aa2da0d7de142e0e000040");

                try {
                    APSGeofences.remove(null, new APSResponseHandler() {

                        @Override
                        public void onResponse(final APSResponse e) {
                            if (e.getSuccess()) {
                                new AlertDialog.Builder(currentActivity)
                                .setTitle("Success!").setMessage("Removed!")
                                .setPositiveButton(android.R.string.ok, null)
                                .setIcon(android.R.drawable.ic_dialog_info)
                                .show();
                            } else {
                                Log.e("APSGeofences", "ERROR: " + e.getMessage());
                            }
                        }

                        @Override
                        public void onException(final APSCloudException e) {
                            Log.e("APSGeofences", "Exception throw: " + e.toString());
                        }
                    });
                } catch (APSCloudException e) {
                    Log.e("APSGeofences", "Exception thrown: " + e.toString());
                }
